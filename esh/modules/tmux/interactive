#!/bin/sh
# -*- mode: sh -*-


########### tmux

if _process_ppid && _process_comm "$_process_ppid"; then
    case "$_process_comm" in
        *[Tt][Ee][Rr][Mm]*) export TMUX= ;;
        *[Rr][Xx][Vv][Tt]*) export TMUX= ;;
    esac
fi


_want_auto_tmux()
{
    [ -r "$ESH_CONF_DIR/auto_tmux" ] || return 1

    if grep "^${HOSTNAME}$" "$ESH_CONF_DIR/auto_tmux" >/dev/null 2>&1 || grep "^${SHORT_HOSTNAME}$" "$ESH_CONF_DIR/auto_tmux" >/dev/null 2>&1; then
        return 0
    fi
    return 1
}

_ensure_tmux_is_running()
{
    atx _init_
}

if _want_auto_tmux; then
    _ensure_tmux_is_running
fi


tx()
{
    tmux "$@"
}

tmx()
{
    tmux "$@"
}


########### tmuxinator

esh_has_ruby()
{
    esh_has_ruby=FALSE
    which ruby >/dev/null 2>/dev/null && esh_has_ruby=TRUE
}
esh_has_ruby


if [ -z "$ESH_MODULE_DIR" ]; then
    SCRIPT_NAME="${0##*/}"
    SCRIPT_RPATH="${0%$SCRIPT_NAME}"
    SCRIPT_PATH=`cd "${SCRIPT_RPATH:-.}" && pwd`
    ESH_MODULE_DIR="$SCRIPT_PATH"
fi
esh_tmux_completion_f="$ESH_MODULE_DIR/tmuxinator.$ESH_SH_CUR_SHORT"
if [ -r "$esh_tmux_completion_f" ]; then
    . "$esh_tmux_completion_f"
fi


txr()
{
    mx__try=0
    tmuxinator=
    while : ; do
        tmuxinator="$(which tmuxinator 2>/dev/null)"
        [ -n "$tmuxinator" ] && break
        if [ $mx__try -ne 0 ]; then
            printf >&2 "%s\n" "could not setup tmuxinator"
            return 1
        fi
        if ! $esh_has_ruby; then
            printf >&2 "%s\n" "tmuxinator is missing" "ruby is missing"
            return 1
        fi
        gem install tmuxinator
        mx__try=1
    done
    "$tmuxinator" "$@"
}

tmxr()
{
    txr "$@"
}
