#!/bin/sh
# -*- mode: sh -*-


###################
# ##### ESH ##### #
###################
[ -r "$ESH_DIR/prompt/prompt" ] &&
    . "$ESH_DIR/prompt/prompt"




## key
# bindkey -v			# vi key bindings
# bindkey -mv			# vi key bindings with Meta = Esc
bindkey -e			# emacs key bindings
#bindkey -me			# emacs key bindings with Meta = Esc

#bindkey "^P" vi-up-line-or-history
#bindkey "^N" vi-down-line-or-history

#bindkey "^[[1~" vi-beginning-of-line   # Home
#bindkey "^[[4~" vi-end-of-line         # End
#bindkey '^[[2~' beep                   # Insert
#bindkey '^[[3~' delete-char            # Del
#bindkey '^[[5~' vi-backward-blank-word # Page Up
#bindkey '^[[6~' vi-forward-blank-word  # Page Down


## completion
autoload -Uz compinit && compinit


## colors
autoload -U colors && colors
# for c in $(echo ${(o)color}) ; do printf "%15s : %s\n" "$c" "$fg[$c]TEST 1234567890$reset_color" ; done


## prompt
autoload zsh/terminfo
autoload -U promptinit && promptinit


######################
# ##### SETOPT ##### #
######################

unsetopt beep
setopt   emacs
setopt   interactivecomments
setopt   correct
setopt   correctall
unsetopt hist_beep
unsetopt list_beep
# prompt substitution
setopt prompt_subst


###################
# ##### VCS ##### #
###################
# autoload -Uz vcs_info

## example 1
# precmd_vcs_info() { vcs_info }
# precmd_functions+=( precmd_vcs_info )
# setopt prompt_subst
# RPROMPT='${vcs_info_msg_0_}'
# # PROMPT='${vcs_info_msg_0_}%# '
# zstyle ':vcs_info:git:*' formats '%b'

# example 2
# zstyle ':vcs_info:*' enable git # hg
# zstyle ':vcs_info:git:*' formats '%F{240}(%b)%r%f'
# alias vcs_i='vcs_info command; vcs_info_lastmsg'
# precmd_vcs_info() { vcs_info }
# # in prompt
# #  precmd_functions+=( precmd_vcs_info )
# #  RPROMPT=\$vcs_info_msg_0_

# [ -r "$ESH_DIR/modules/git-prompt.sh" ] && . "$ESH_DIR/modules/git-prompt.sh"
# precmd_git_prompt() { __git_ps1 "%n" ":%~$ " "|%s" }
# export GIT_PS1_SHOWDIRTYSTATE=1
# # export GIT_PS1_SHOWSTASHSTATE=1
# export GIT_PS1_SHOWUNTRACKEDFILES=1
# # export GIT_PS1_SHOWUPSTREAM="auto"
# # export GIT_PS1_STATESEPARATOR=
# # export GIT_PS1_DESCRIBE_STYLE=default
# export GIT_PS1_SHOWCOLORHINTS=1
# # export GIT_PS1_HIDE_IF_PWD_IGNORED=1


############################
# ##### PROMPT TOOLS ##### #
############################
prompt_padding()
{
    [ $# -eq 2 ] || echo "$1"
    prompt_padding_ret="$1"
    while [ ${#prompt_padding_ret} -lt $2 ]; do
	prompt_padding_ret="${prompt_padding_ret}$1"
    done
    echo "$prompt_padding_ret"
}

PROMPT_TIMESTAMP_STATUS=false
prompt_timestamp()
{
    if [ -n "$PROMPT_TIMESTAMP_STATUS" ] && $PROMPT_TIMESTAMP_STATUS; then
	PROMPT_TIMESTAMP_STATUS=false
    else
	PROMPT_TIMESTAMP_STATUS=true
    fi
}

prompt_timestamp_precmd()
{
    #prompt_work_last_ret=$?
    #[ $prompt_work_last_ret -ne 0 ] && printf "${COLOR_RED}${prompt_work_last_ret}${COLOR_OFF}\n"
    psvar[9]=
    [ -n "$PROMPT_TIMESTAMP_STATUS" ] && $PROMPT_TIMESTAMP_STATUS && psvar[9]=$(prompt_timer '=')
}

prompt_timestamp_preexec()
{
    PROMPT_LAST_CMD="$2"
    [ -n "$PROMPT_TIMESTAMP_STATUS" ] && $PROMPT_TIMESTAMP_STATUS && {
            printf "%s%s%s" "$fg_no_bold[cyan]" "$(prompt_timer)" "$reset_color"
        }
}

prompt_timer()
{
    prompt_timer_size=19
    prompt_timer_sep="${1--}"
    prompt_timer=`date "+%Y-%m-%d %H:%M:%S"`
    prompt_timer_padding=`prompt_padding ${prompt_timer_sep} $(($COLUMNS - $prompt_timer_size))`
    printf "%s%s\n" "$prompt_timer_padding"  "$prompt_timer"
}

zsh_xterm_title()
{
    print -Pn "\e]0;%n@%m:%~ %# $*\a"
}


######################
# ##### COLORS ##### #
######################
for color in RED GREEN YELLOW BLUE MAGENTA CYAN BLACK WHITE; do
    eval COLOR_$color='%{$fg_no_bold[${(L)color}]%}'
    eval COLOR_B_$color='%{$fg_bold[${(L)color}]%}'
done
eval COLOR_OFF='%{$reset_color%}'

COLOR_B_USER="$COLOR_B_GREEN"
COLOR_USER="$COLOR_GREEN"
if [ "$(id -u)" = "0" ]; then
    COLOR_B_USER="$COLOR_B_RED"
    COLOR_USER="$COLOR_RED"
fi


######################
# ##### PROMPT ##### #
######################

prompt_work()
{
    case $TERM in
        xterm*)
            precmd()
            {
                prompt_timestamp_precmd
                zsh_xterm_title
            }
            preexec()
            {
                prompt_timestamp_preexec "$@"
                zsh_xterm_title "$2"
            }
            ;;
    esac

    PROMPT_WORK_BASE="${COLOR_B_USER}%n@%m:%~${COLOR_OFF}
${COLOR_USER}%(1j.%jj .)%h %(!.${COLOR_B_RED}.)%#${COLOR_OFF} "
    PROMPT_WORK_ERROR="%(?..${COLOR_B_RED}%?${COLOR_OFF}
)"
    PROMPT_WORK_TIMESTAMP="%(9V.${COLOR_CYAN}%9v${COLOR_OFF}
.)"

    PROMPT="${PROMPT_WORK_BASE}"
    PROMPT="${PROMPT_WORK_ERROR}${PROMPT_WORK_TIMESTAMP}${PROMPT}"
}

prompt_pre_set_timestamp()
{
    precmd()
    {
        prompt_timestamp_precmd
        case $TERM in
            xterm*) zsh_xterm_title ;;
        esac
    }
    preexec()
    {
        prompt_timestamp_preexec "$@"
        case $TERM in
            xterm*) zsh_xterm_title "$2" ;;
        esac
    }
}

prompt_base()
{
    NEWLINE=$'\n'

    PROMPT_BASE_1="${COLOR_B_USER}%n${COLOR_OFF}@${COLOR_B_USER}%m${COLOR_OFF}:${COLOR_B_BLUE}%~${COLOR_OFF}"
    PROMPT_BASE_2="${COLOR_USER}%(1j.%jj .)%(!.${COLOR_B_RED}.)%#${COLOR_OFF} "
    PROMPT_ERROR="%(?..${COLOR_B_RED}%?${COLOR_OFF}
)"
    PROMPT_TIMESTAMP="%(9V.${COLOR_CYAN}%9v${COLOR_OFF}
.)"
    PROMPT_GIT="${COLOR_YELLOW}"'$(prompt_git_printf "(%s)")'"${COLOR_OFF}"
    PROMPT_RUBY="${COLOR_YELLOW}"'$(prompt_ruby_printf "(%s)")'"${COLOR_OFF}"
    PROMPT_PYTHON="${COLOR_YELLOW}"'$(prompt_python_printf "(%s)")'"${COLOR_OFF}"

    PROMPT_DEV="${COLOR_YELLOW}"'$(prompt_dev_printf)'"${COLOR_OFF}"
}

prompt_dev_printf()
{
    prompt_dev_printf=
    for prompt_dev_printf__t in git python ruby; do
        prompt_${prompt_dev_printf__t}
        eval prompt_dev_printf__tp="\"\$prompt_$prompt_dev_printf__t\""
        if [ -n "$prompt_dev_printf__tp" ]; then
            prompt_dev_printf="${prompt_dev_printf:+$prompt_dev_printf  }${prompt_dev_printf__tp}"
        fi
    done
    prompt_dev_printf="${prompt_dev_printf:+\n$prompt_dev_printf}"
    printf "%b" "$prompt_dev_printf"
}

prompt_dev()
{
    prompt_base

    PROMPT="${PROMPT_ERROR}${PROMPT_BASE_1}${PROMPT_DEV}
${PROMPT_BASE_2}"
}
# prompt_dev

prompt_with_prompt_git()
{
    prompt_2020_l1='%(?..%F{red}%? )%f%B%F{green}%n%f%b@%B%F{green}%m%f%b:%B%F{blue}%~%f%b'
    prompt_2020_l2='
%B%(!.%F{red}#.%F{172}>)%f%b '

    # RPROMPT='%*'
    # RPROMPT=\$vcs_info_msg_0_
    prompt_2020_git_prompt() { __git_ps1 "$prompt_2020_l1" "$prompt_2020_l2" " %s" }
    precmd_functions+=( prompt_2020_git_prompt )
}
# prompt_with_prompt_git

prompt_dev()
{
    prompt_dev=

    prompt_git "%F{yellow}" "%F{green}" "%F{red}" "%f"
    [ -z "$prompt_git" ] ||
        prompt_dev="${prompt_dev:+$prompt_dev  }$prompt_git"
    prompt_ruby "%F{yellow}" "%f"
    [ -z "$prompt_ruby" ] ||
        prompt_dev="${prompt_dev:+$prompt_dev  }$prompt_ruby"
    prompt_python "%F{yellow}" "%f"
    [ -z "$prompt_python" ] ||
        prompt_dev="${prompt_dev:+$prompt_dev  }$prompt_python"

    if [ -n "$prompt_dev" ]; then
        prompt_dev="
$prompt_dev"
    fi
}

prompt_2020()
{
    prompt_2020_error='%(?..%B%F{red}%?%f%b
)'
    prompt_2020_l1='%f%B%F{green}%n%f%b@%B%F{green}%m%f%b:%B%F{blue}%~%f%b'
    prompt_2020_l2='
%B%(!.%F{red}.%F{130})%#%f%b '

    PROMPT="${prompt_2020_error}${prompt_2020_l1}\${prompt_dev}${prompt_2020_l2}"
    RPROMPT="\$prompt_git_alt"


    precmd_functions+=( prompt_dev )
}
prompt_2020
