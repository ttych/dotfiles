#!/bin/sh
# -*- mode: sh -*-



########## rbenv
rbenv_guess_path()
{
    rbenv_guess_path="${1}"
    rbenv_guess_path="${rbenv_guess_path:-$(rbenv root 2>/dev/null)}"
    rbenv_guess_path="${rbenv_guess_path:-$RBENV_ROOT}"
    rbenv_guess_path="${rbenv_guess_path:-$HOME/.rbenv}"
}

rbenv_load()
{
    rbenv_guess_path "$1"
    RBENV_ROOT="$rbenv_guess_path"
    export RBENV_ROOT
    PATH="$RBENV_ROOT/bin:$PATH"
    export PATH
    eval "$(rbenv init -)"
    #[ -r "$RBENV_ROOT/completions/rbenv.${SHELL_SHORT}" ] &&
    #    . "$RBENV_ROOT/completions/rbenv.${SHELL_SHORT}"
}



########## rvm
rvm_load()
{
    source "${1:-$HOME/.rvm/scripts/rvm}"
}



########## env
ruby_env()
{
    [ -n "$ruby_env" ] && return 0

    for _RUBY_HOME in "${HOME_ALT}" "${HOME}"; do
        _RUBY_RBENV_AVAILABLE=false
        _RUBY_RBENV_ROOT="$_RUBY_HOME/.rbenv"
        ( cd "$_RUBY_RBENV_ROOT" 2>/dev/null ) && [ -x "$_RUBY_RBENV_ROOT/bin/rbenv" ] && _RUBY_RBENV_AVAILABLE=true

        _RUBY_RVM_AVAILABLE=false
        _RUBY_RVM_ROOT="$_RUBY_HOME/.rvm"
        ( cd "$_RUBY_RVM_ROOT" 2>/dev/null ) && [ -x "$_RUBY_RVM_ROOT/scripts/rvm" ] && _RUBY_RVM_AVAILABLE=true

        if $_RUBY_RBENV_AVAILABLE; then
            rbenv_load "$_RUBY_RBENV_ROOT"
            ruby_env="rbenv"
            break
        elif $_RUBY_RVM_AVAILABLE; then
            rvm_load "$_RUBY_RVM_ROOT"
            ruby_env="rvm"
            break
        fi
    done
}

ruby_env



########## gem
GEM_PACK_CAPISTRANO="capistrano"
GEM_PACK_JEKYLL="jekyll"
GEM_PACK_QUALITY="rubocop reek flay flog erb_lint"
GEM_PACK_RACK="rack shotgun"
GEM_PACK_RAILS="rails rails-erb-lint rspec-rails"
GEM_PACK_RSPEC="rspec"
GEM_PACK_SINATRA="sinatra"
GEM_PACK_UTILS="quick_and_ruby"

gem_pack_1()
{
    gem_pack_1="$1"

    gem_pack_1__content=
    if [ "$gem_pack_1" = "all" ]; then
        for gem_pack_1__pack in `set | egrep '^GEM_PACK_[A-Z]*=' | cut -d '=' -f 1`; do
            eval gem_pack_1__content="\${gem_pack_1__content:+$gem_pack_1__content }\$$gem_pack_1__pack"
        done
    else
        eval gem_pack_1__content="\${GEM_PACK_`echo $gem_pack | tr '[a-z]' '[A-Z]'`}"
    fi

    if [ -z "$gem_pack_1__content" ]; then
        echo >&2 "gem pack \"$gem_pack\" is empty"
        return 2
    fi

    gem install $gem_pack_1__content
    return $?
}

gem_pack()
{
    gem_pack__ret=0
    for gem_pack; do
        gem_pack_1 "$gem_pack" ||
            gem_pack__ret=1
    done
    return $gem_pack__ret
}
