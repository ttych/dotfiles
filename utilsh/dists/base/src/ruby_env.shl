#!/bin/sh
# -*- mode: sh -*-



########## rbenv
rbenv_guess_path()
{
    rbenv_guess_path="${1}"
    rbenv_guess_path="${rbenv_guess_path:-$(rbenv root 2>/dev/null)}"
    rbenv_guess_path="${rbenv_guess_path:-$RBENV_ROOT}"
    rbenv_guess_path="${rbenv_guess_path:-$HOME/.rbenv}"
}

rbenv_load()
{
    rbenv_guess_path "$1"
    RBENV_ROOT="$rbenv_guess_path"
    export RBENV_ROOT
    PATH="$RBENV_ROOT/bin:$PATH"
    export PATH
    eval "$(rbenv init -)"
    #[ -r "$RBENV_ROOT/completions/rbenv.${SHELL_SHORT}" ] &&
    #    . "$RBENV_ROOT/completions/rbenv.${SHELL_SHORT}"
}



########## rvm
rvm_load()
{
    source "${1:-$HOME/.rvm/scripts/rvm}"
}



########## env
ruby_env()
{
    [ -n "$ruby_env" ] && return 0

    for _RUBY_HOME in "${HOME_ALT}" "${HOME}"; do
        _RUBY_RBENV_AVAILABLE=false
        _RUBY_RBENV_ROOT="$_RUBY_HOME/.rbenv"
        ( cd "$_RUBY_RBENV_ROOT" 2>/dev/null ) && [ -x "$_RUBY_RBENV_ROOT/bin/rbenv" ] && _RUBY_RBENV_AVAILABLE=true

        _RUBY_RVM_AVAILABLE=false
        _RUBY_RVM_ROOT="$_RUBY_HOME/.rvm"
        ( cd "$_RUBY_RVM_ROOT" 2>/dev/null ) && [ -x "$_RUBY_RVM_ROOT/scripts/rvm" ] && _RUBY_RVM_AVAILABLE=true

        if $_RUBY_RBENV_AVAILABLE; then
            rbenv_load "$_RUBY_RBENV_ROOT"
            ruby_env="rbenv"
            break
        elif $_RUBY_RVM_AVAILABLE; then
            rvm_load "$_RUBY_RVM_ROOT"
            ruby_env="rvm"
            break
        fi
    done
}

ruby_env



 
########## extra Ruby env
rubyenv_guess_root()
{
    eval rubyenv_guess_root="\$$1"
    if [ -z "$rubyenv_guess_root" ]; then
        rubyenv_guess_root_=
        # existing ?
        for rubyenv_guess_root__h in "${HOME_ALT}" "${HOME}"; do
            [ -z "$rubyenv_guess_root__h" ] && continue
            [ -z "$rubyenv_guess_root_" ] && rubyenv_guess_root_="${rubyenv_guess_root__h}/${2}"
            if [ -d "${rubyenv_guess_root__h}/${2}" ]; then
                rubyenv_guess_root="${rubyenv_guess_root__h}/${2}"
                break
            fi
        done
        # set default
        [ -z "$rubyenv_guess_root" ] && rubyenv_guess_root="$rubyenv_guess_root_"

        eval "$1"="$rubyenv_guess_root"
        export "$1"
    fi
}

rubyenv_guess_root RUBY_BUILD_ROOT local/ruby-build
rubyenv_guess_root RUBY_INSTALL_ROOT local/ruby-install



########## interactive
rb()
{
    ruby "$@"
}
rcop()
{
    rubocop "$@"
}

bundle_exec()
{
    bundle exec "$@"
}

be()
{
    bundle_exec "$@"
}
bexec()
{
    bundle_exec "$@"
}
brake()
{
    bundle_exec rake "$@"
}
bruby()
{
    bundle_exec ruby "$@"
}
brb()
{
    bruby "$@"
}
birb()
{
    bundle_exec irb "$@"
}
brails()
{
    bundle_exec rails "$@"
}
bconsole()
{
    bundle_exec console "$@"
}
brubocop()
{
    bundle_exec rubocop "$@"
}
brcop()
{
    bundle_exec rubocop "$@"
}
brspec()
{
    bundle_exec rspec "$@"
}
bguard()
{
    bundle_exec guard "$@"
}
bcap()
{
    bundle_exec cap "$@"
}
bjekyll()
{
    bundle_exec jekyll "$@"
}
bjekylls()
{
    bjekyll serve --drafts --livereload --watch "$@"
}
bnanoc()
{
    bundle_exec nanoc "$@"
}
bnanocs()
{
    bnanoc view --live-reload "$@"
}
bnanocb()
{
    bnanoc compile --watch "$@"
}
bmiddleman()
{
    bundle_exec middleman "$@"
}
bmiddlemans()
{
    bmiddleman server --verbose "$@"
}

yards()
{
    yard server --reload "$@"
}
byards()
{
    bundle exec yard server --reload "$@"
}

Bexec()
{
    bundle_exec "$@"
}
Brake()
{
    bundle_exec rake "$@"
}
Bruby()
{
    bundle_exec ruby "$@"
}
Brails()
{
    bundle_exec rails "$@"
}
Bconsole()
{
    bundle_exec console "$@"
}
Birb()
{
    bundle_exec irb "$@"
}
Brubocop()
{
    bundle_exec rubocop "$@"
}
Brcop()
{
    bundle_exec rubocop "$@"
}
Brspec()
{
    bundle_exec rspec "$@"
}
Bguard()
{
    bundle_exec guard "$@"
}
Bcap()
{
    bundle_exec cap "$@"
}
Bjekyll()
{
    bundle_exec jekyll "$@"
}
Bjekylls()
{
    bundle_exec jekyll serve --drafts --livereload --watch "$@"
}
Bjekylls2()
{
    bundle_exec jekyll serve --port 4001 --drafts --livereload --livereload-port 4011 --watch "$@"
}
Bnanoc()
{
    bundle_exec nanoc "$@"
}
Bnanocs()
{
    Bnanoc view --live-reload "$@"
}
Bnanocb()
{
    Bnanoc compile --watch "$@"
}
Bmiddleman()
{
    bundle_exec middleman "$@"
}
Bmiddlemans()
{
    Bmiddleman server --verbose "$@"
}
Byards()
{
    bundle_exec yard server --reload "$@"
}

rman()
{
    gem man -s "$@"
}
