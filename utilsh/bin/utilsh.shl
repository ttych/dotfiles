#!/bin/sh


UTILSH_DISTRIBUTIONS_DIR="$UTILSH_DIR/dists"
UTILSH_AUTOLOAD="$UTILSH_DIR/autoload"
UTILSH_LIB="$UTILSH_DIR/bin/utilsh.shl"
UTILSH_AUTOLOAD="$UTILSH_DIR/autoload"


### utils

git_update()
{
    if git rev-parse @{u} >/dev/null 2>&1; then
        git reset --quiet --hard HEAD &&
            git pull --quiet --no-rebase --ff-only
    fi
    git submodule --quiet update --init --recursive
}

path_check_in()
(
    case $PATH in
        "$1"|*:"$1"|"$1":*|*:"$1":*)
            return 0
            ;;
    esac
    return 1
)

### distribution

utilsh_distribution_path_all()
{
    utilsh_distribution_path_all=
    for utilsh_distribution_path_all__d in "$UTILSH_DISTRIBUTIONS_DIR/"*/; do
        [ -d "$utilsh_distribution_path_all__d" ] || continue
        utilsh_distribution_path_all__d="${utilsh_distribution_path_all__d%/}"
        utilsh_distribution_path_all__added=
        for utilsh_distribution_path_all__sub in sbin bin; do
            utilsh_distribution_path_all__tmp="$utilsh_distribution_path_all__d/$utilsh_distribution_path_all__sub"
            [ -d "$utilsh_distribution_path_all__tmp" ] || continue
            utilsh_distribution_path_all__added=done
            utilsh_distribution_path_all="${utilsh_distribution_path_all__tmp}${utilsh_distribution_path_all:+:$utilsh_distribution_path_all}"
        done
        if [ -z "$utilsh_distribution_path_all__added" ]; then
            utilsh_distribution_path_all="${utilsh_distribution_path_all__d}${utilsh_distribution_path_all:+:$utilsh_distribution_path_all}"
        fi
    done
}
utilsh_distribution_path_all

utilsh_distribution_path_iter()
{
    utilsh_distribution_path_iter__IFS="$IFS"
    IFS=:
    for utilsh_distribution_path_iter__p in $utilsh_distribution_path_all; do
        IFS="$utilsh_distribution_path_iter__IFS" "$1" "$utilsh_distribution_path_iter__p" && {
            IFS="$utilsh_distribution_path_iter__IFS"
            return 0
        }
    done
    IFS="$utilsh_distribution_path_iter__IFS"
    return 1
}

utilsh_distribution_path()
{
    utilsh_distribution_path=
    utilsh_distribution_path_iter utilsh_distribution_path_append
    return 0
}

utilsh_distribution_path_append()
{
    if ! path_check_in "$1"; then
        utilsh_distribution_path="${1}${utilsh_distribution_path:+:$utilsh_distribution_path}"
    fi
    return 1
}

utilsh_distribution()
{
    utilsh_distribution__command="$1"
    case "$utilsh_distribution__command" in
        add|rm)
            shift
            utilsh_distribution_"${utilsh_distribution__command}" "$@"
            ;;
        update|build)
            shift
            utilsh_distribution_iter "utilsh_distribution_${utilsh_distribution__command}"
            ;;
        *)
            echo >&2 "unsupported command \"distribution $1 $@\""
            return 1
            ;;
    esac
}

utilsh_distribution_add()
(
    mkdir -p "$UTILSH_DISTRIBUTIONS_DIR"

    utilsh_distribution_add__name="${1##*/}"
    utilsh_distribution_add__name="${utilsh_distribution_add__name%.git}"

    cd "$UTILSH_DISTRIBUTIONS_DIR" || return $?
    if [ -d "$utilsh_distribution_add__name" ]; then
        rm -Rf "$utilsh_distribution_add__name" || return $?
    fi
    git clone "$1" || return $?
    utilsh_distribution build
)

utilsh_distribution_rm()
(
    rm -Rf "$UTILSH_DISTRIBUTIONS_DIR/$1"
)

utilsh_distribution_update()
(
    cd "$1" &&
        echo updating "$1" &&
        git_update
)

utilsh_distribution_iter()
{
    utilsh_distribution_iter__command="$1"

    for utilsh_build__d in "$UTILSH_DISTRIBUTIONS_DIR"/*; do
        if [ -d "$utilsh_build__d" ]; then
            "$utilsh_distribution_iter__command" "$utilsh_build__d" ||
                echo >&2 "failed to build distribution $utilsh_build__d"
        fi
    done
}

utilsh_distribution_find()
{
    find "${1:-.}" -name '[._]?*' -prune \
         -o -name '*.md' -prune \
         -o -type f -print \
         -o -type l -print
}

utilsh_distribution_build()
(
    cd "$1" || return 1
    if [ -d "src" ]; then
        mkdir -p "bin" || return 1
        utilsh_distribution_find "src" | while read utilsh_distribution_build__f; do
            utilsh_distribution_build_file "$utilsh_distribution_build__f"
        done
    else
        utilsh_distribution_build__d=.
        [ -d "bin" ] &&
            utilsh_distribution_build__d=bin
        find "$utilsh_distribution_build__d" -type f | while read utilsh_distribution_build__f; do
            utilsh_distribution_build_chmod "$utilsh_distribution_build__f"
        done
    fi
)

utilsh_distribution_build_file()
{
    utilsh_distribution_build_file__src="$1"
    utilsh_distribution_build_file__dir="$PWD/bin"
    utilsh_distribution_build_file__tgt="$utilsh_distribution_build_file__dir/${1#src/}"

    sed -e "s;^\#%%load%%  *;. \"$utilsh_distribution_build_file__dir\"/;g" \
        -e "s;^\#%%set_cur_dir%%;SCRIPT_DIR=\"$utilsh_distribution_build_file__pwd\";g" \
        -e "s;^\#%%set_cur_file%%;SCRIPT_FILE=\"$utilsh_distribution_build_file__tgt\";g" \
        "$utilsh_distribution_build_file__src" > "$utilsh_distribution_build_file__tgt"

    utilsh_distribution_build_chmod "$utilsh_distribution_build_file__tgt"
}

utilsh_distribution_build_chmod()
{
    [ -r "$1" ] || return 1

    utilsh_distribution_build_chmod__right=755
    case "$1" in
        */LICENSE|*.md|*.txt|*.tpl) utilsh_distribution_build_chmod__right=644 ;;
        *.lib|*.shl) utilsh_distribution_build_chmod__right=644 ;;
    esac
    chmod "$utilsh_distribution_build_chmod__right" "$1"
}

### build

utilsh_build()
{
    utilsh_distribution build
}


### update

utilsh_update()
{
    utilsh_update_fetch &&
        utilsh_distribution update &&
        utilsh_build
}

utilsh_update_fetch()
(
    if cd "$UTILSH_DIR"; then
        git_update
    else
        return 1
    fi
)


### autoload

utilsh_autoload()
{
    if [ $# -gt 0 ]; then
        utilsh_autoload_add "$@"
    else
        utilsh_autoload_load_all
    fi
}

utilsh_autoload_add()
{
    for utilsh_autoload_add__d; do
        [ -z "$utilsh_autoload_add__d" ] && continue
        if ! grep -q "^$utilsh_autoload_add__d$" "$UTILSH_AUTOLOAD" 2>/dev/null; then
            echo "$utilsh_autoload_add__d" >> "$UTILSH_AUTOLOAD"
        fi
    done
}

utilsh_autoload_load_all()
{
    [ -r "$UTILSH_AUTOLOAD" ] || return 0

    while read utilsh_autoload_load; do
        utilsh_distribution_path_iter utilsh_autoload_load || {
            echo >&2 not able to load $utilsh_autoload_load
        }
    done < "$UTILSH_AUTOLOAD"
}

utilsh_autoload_load()
{
    if [ -r "$1/$utilsh_autoload_load" ]; then
        . "$1/$utilsh_autoload_load"
        return 0
    fi
    return 1
}


### init

utilsh_init()
{
    utilsh_bin_path
    utilsh_distribution_path
    utilsh_init__path="$utilsh_bin_path"
    if [ -n "$utilsh_distribution_path" ]; then
        utilsh_init__path="${utilsh_distribution_path}${utilsh_init__path:+:$utilsh_init__path}"
    fi

    cat <<EOF
export UTILSH_DIR="$UTILSH_DIR"
export PATH="${utilsh_init__path:+$utilsh_init__path:}\$PATH"
. "$UTILSH_LIB"
utilsh autoload
EOF
}

utilsh_bin_path()
{
    utilsh_bin_path=
    if ! path_check_in "$UTILSH_DIR/bin"; then
        utilsh_bin_path="$UTILSH_DIR/bin"
    fi
}


### reload

utilsh_reload()
{
    utilsh_distribution_path_all
    eval "$(utilsh_init)"
}


### help

utilsh_help()
{
    cat >&2 <<EOF
usage is :
  $0 action

action is :
  init
  distribution
  update
  build
  autoload
  reload
EOF
}


### wrapper

utilsh()
{
    utilsh__command="$1"
    if [ "$#" -gt 0 ]; then
        shift
    fi

    case "$utilsh__command" in
        build|init|distribution|update|autoload|reload|help|"")
            utilsh_"${utilsh__command:-help}" "$@";
            utilsh__status=$?
            ;;
        *)
            echo >&2 "unsupported command \"$command\""
            utilsh__status=2
            ;;
    esac
    return $utilsh__status
}
