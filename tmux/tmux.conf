
########## prefix
# set -g prefix C-a
# unbind-key C-b
# bind-key C-a send-prefix
# bind-key -r C-a send-prefix

# remap used by others:
# - M-a (reverse-sentence in emacs)

########## keys mode
set-option -g mode-keys emacs
set-option -g status-keys emacs

########## time
# set-option -s escape-time 0
# set-option -g escape-time 500
# set-option -g repeat-time 500
### display time
# set-option -g display-panes-time 2000
# set-option -g display-time 2000

########## terminal
# set-option -g default-shell /bin/zsh
set-option -g default-terminal 'screen-256color'
set-option -gw xterm-keys on
### history
set-option -g history-limit 50000
## focus events for terminals that support them
set-option -g focus-events on

########## window
set-option -g base-index 1
set-option -g renumber-windows on

########## pane
set-window-option -g pane-base-index 1

########## reload
bind-key r source-file $HOME/.tmux.conf \; display-message "$HOME/.tmux.conf Reloaded!"
bind-key C-r source-file $HOME/.tmux.conf \; display-message "$HOME/.tmux.conf Reloaded!"

########## binding
### select pane
# bind-key -n C-h select-pane -L
# bind-key -n C-j select-pane -D
# bind-key -n C-k select-pane -U
# bind-key -n C-l select-pane -R
bind-key -n M-Left select-pane -L
bind-key -n M-Right select-pane -R
bind-key -n M-Up select-pane -U
bind-key -n M-Down select-pane -D
bind-key O select-pane -t :.-
### resize pane
# bind-key -n M-S-Left resize-pane -L 2
# bind-key -n M-S-Right resize-pane -R 2
# bind-key -n M-S-Up resize-pane -U 1
# bind-key -n M-S-Down resize-pane -D 1
### split pane
bind-key - split-window -v -c '#{pane_current_path}'
bind-key | split-window -h -c '#{pane_current_path}'
bind-key \\ split-window -h -c '#{pane_current_path}'
### pane
bind-key q display-panes -bN -d 3000
bind-key = set-window-option synchronize-panes\; display-message "synchronize-panes is now #{?pane_synchronized,on,off}"
bind-key b break-pane -d
bind-key * display-panes -bN -d 3000 \; command-prompt -p 'pane #: ' "swap-pane -t '%%'"
bind-key + command-prompt -p 'join pane from: ' "join-pane -h -s '%%'"
### window
bind-key < swap-window -d -t -1
bind-key > swap-window -d -t +1
# bind-key -r C-p select-window -t :-
# bind-key -r C-n select-window -t :+
bind-key / new-window -c '#{pane_current_path}'
bind-key k confirm-before -p "kill-window #W? (y/n)" kill-window
bind-key _ command-prompt -p "move this window to session: " "move-window -t '%%'"
bind-key 0 select-window -t :=10
### session
bind-key C-n switch-client -n
bind-key C-p switch-client -p
bind-key C-l switch-client -l
#bind-key C new -A -c '#{pane_current_path}' -s '#{session_name}-2'
#bind-key C run-shell 'tmux new-session -d -c "#{pane_current_path}" -s "#{session_name}-2"' \; switch-client -n
bind-key C-c send-keys 'atx' 'C-m'
# bind-key C-c send-keys 'atx' 'C-m'
# bind-key V send-keys 'atx && exit' 'C-m'
bind-key C-s command-prompt -p 'session name: ' "new -A -s '%%' -c '#{pane_current_path}'"
bind-key C-k confirm-before -p "kill-session #S? (y/n)" kill-session
bind-key C-x run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'
### layout
bind-key M-6 run-shell "~/.tmux/scripts/resize-adaptable.sh -l main-vertical -p 67"
bind-key M-7 run-shell "~/.tmux/scripts/resize-adaptable.sh -l main-vertical -p 33"
bind-key M-8 run-shell "~/.tmux/scripts/resize-adaptable.sh -l main-horizontal -p 67"
bind-key M-9 run-shell "~/.tmux/scripts/resize-adaptable.sh -l main-horizontal -p 33"

########## mouse
set-option -g mouse off

########## copy
# Unbind to have the same behavior
unbind-key -T copy-mode M-Left
unbind-key -T copy-mode M-Right
unbind-key -T copy-mode M-Up
unbind-key -T copy-mode M-Down
unbind-key -T copy-mode M-S-Left
unbind-key -T copy-mode M-S-Right
unbind-key -T copy-mode M-S-Up
unbind-key -T copy-mode M-S-Down
# bind-key -n -T copy-mode M-w send-keys -X copy-pipe "xsel -i -p ; xsel -o -p | xclip -i -b"
# bind-key -n -T copy-mode M-w send-keys -X copy-pipe "xclip -i -sel p -f | xclip -i -sel c"
# bind-key -n -T copy-mode MouseDragEnd1Pane send-keys -X copy-pipe "xsel -i -p ; xsel -o -p | xclip -i -b"
# bind-key -n -T copy-mode MouseDragEnd1Pane send-keys -X copy-pipe "xclip -i -sel p -f | xclip -i -sel c"

########## copy (vi)
# escape turns on copy mode
# bind-key Escape copy-mode

########## buffer
# bind-key P pipe-pane -o "cat >> ~/.log/tmux_#W.log" \; display "Toggled logging to ~/.log/tmux_#W.log"
bind-key B choose-buffer
bind-key V capture-pane
## bind-key  show-buffer
## bind-key  list-buffers
## bind-key  paste-buffer
# bind-key  capture-pane; save-buffer buffer.txt.

########## status
set-option -g status on
set-option -g status-interval 10
set-option -g status-style default
set-option -g status-keys 'emacs'
# set-option -g status-position top
# set-option -g status-justify centre
set-option -g status-left-length 50
set-option -g status-right-length 50
# set-option -g status-left '[#S](#I:#P) '
# set-option -g status-left "#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P"
set-option -g status-left '[#S:#I.#P] '
set-option -g status-right '#(load_avg -t " %%s")#(battery -t " %%s") [%H:%M:%S] [#(whoami)@#h]'
# set-option -g status-right " #(date '+%a, %b %d - %I:%M') "
# set-option -g status-right ' [#I-#P] [#h %Y-%m-%d %H:%M:%S]'
# set-option -g status-right '[#h###S:#I:#P]'
# set-option -g status-right ' [%Y-%m-%d %H:%M:%S] [#(whoami)@#h]'
# set-option -g status-right "#(~/battery Discharging) | #[fg=cyan]%d %b %R"
set-option -g status-bg '#333333'
set-option -g status-fg '#bbbbbb'
# set-option -g status-fg white
# set-option -g status-fg red
# set-option -g status-bg black
# set-option -g status-bg green
#set-option -g status-bg '#666666'
#set-option -g status-fg '#aaaaaa'
# set-window-option -g window-status-style fg=cyan,bg=black
#set-window-option -g window-status-current-format "#[fg=default,bg=default,default]#I:#W*"
set-window-option -g window-status-current-style "fg=yellow,bold,bg=default"
# set-window-option -g window-status-current-style fg=white,bold,bg=red
# set-option -g message-style fg=white,bold,bg=black

########## style
#set -g window-style 'fg=colour247,bg=colour236'
#set -g window-active-style 'fg=colour250,bg=black'
#set -g window-style 'bg=colour235'
#set -g window-active-style 'bg=black'
set -g window-active-style 'fg=default,bg=terminal'
set -g window-style 'fg=default,bg=#202020'
### Pane
set-option -g pane-border-style fg=default,bg=#111111
set-option -g pane-active-border-style fg=yellow,bg=#111111
# setw -g pane-border-style fg=green,bg=black
# setw -g pane-active-border-style fg=white,bg=yellow
set-option -g pane-border-status off

########## notification
set-option -g visual-bell off
set-option -g visual-silence off
set-option -g bell-action none
set-option -g visual-activity off
set-window-option -g monitor-activity off

########## command
bind-key T split-window -h -c ~/ 'htop'
bind-key S split-window -v -c ~/ 'watch -n 10 sensors'
bind-key E split-window -h -c ~/ 'e'
bind-key L split-window -h -c ~/ 'egenda'
bind-key M-a split-window -d -h -c '#{pane_current_path}'\; split-window -d -h -c '#{pane_current_path}'\; select-layout even-horizontal
# bind-key C-q split-window -d -h -c '#{pane_current_path}'\; split-window -d -h -c '#{pane_current_path}'\; run-shell "~/.tmux/scripts/resize-adaptable.sh -l main-vertical -p 67"
bind-key M-q split-window -d -h -c '#{pane_current_path}' -t .1 -l 67% \; split-window -d -v -c '#{pane_current_path}' -t .1 -l 50% \; select-pane -t .3
bind-key M-w split-window -d -h -c '#{pane_current_path}'\; split-window -d -h -c '#{pane_current_path}'\; select-layout even-horizontal
bind-key M-e split-window -d -h -c '#{pane_current_path}' -t .1 -l 33% \; split-window -d -v -c '#{pane_current_path}' -t .2 -l 50% \; select-pane -t .1

########## specific conf
if-shell "[ `uname` = Linux ]" "source-file ~/.tmux/linux.conf"
if-shell "[ `uname` = Darwin ]" "source-file ~/.tmux/mac.conf"
if-shell "[ -f ~/.tmux.local ]" "source ~/.tmux.local"


########## plugins
# install:
# git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
#
# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# run '~/.tmux/plugins/tpm/tpm'


########## test


########## help !
## all available commands
#> tmux list-commands
#> tmux list-commands | grep pane (to search pane related commands)
## list all key bindings (live)
#> tmux list-keys
## list all bindings
#> <prefix> ?
## dump current conf
#> tmux show -g
