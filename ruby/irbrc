# -*- mode: ruby -*-

# IRB.conf[:IRB_NAME]="irb"

IRB.conf[:BACK_TRACE_LIMIT] = 16
IRB.conf[:SAVE_HISTORY] = 10000
IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.irb_history"
IRB.conf[:EVAL_HISTORY] = 1000


# IRB.conf[:USE_READLINE] = true
# IRB.conf[:USE_READLINE] = false if ENV['EMACS']

# IRB.conf[:AUTO_INDENT_MODE] = false
IRB.conf[:AUTO_INDENT] = true

IRB.conf[:LOAD_MODULES] ||= []
IRB.conf[:LOAD_MODULES] |= ['irb/completion']
IRB.conf[:LOAD_MODULES] |= ['json']
IRB.conf[:LOAD_MODULES] |= ['yaml']
IRB.conf[:LOAD_MODULES] |= ['set']
IRB.conf[:LOAD_MODULES] |= ['pp']
IRB.conf[:LOAD_MODULES] |= ['objspace']

IRB.conf[:PROMPT][:MY] = {
  :PROMPT_I => "%N(%m):%03n:%i> ",   # simple prompt
  :PROMPT_N => "%N(%m):%03n:%i> ",   #
  :PROMPT_S => "%N(%m):%03n:%i%l ",  # prompt for continuated strings
  :PROMPT_C => "%N(%m):%03n:%i* ",   # prompt for continuated statement
  :RETURN => "=> %s\n"               # format to return value
}
IRB.conf[:PROMPT][:CUSTOM] = {
  :PROMPT_I => ">> ",
  :PROMPT_S => "%l>> ",
  :PROMPT_C => "%l>> ",
  :PROMPT_N => "%l>> ",
  :RETURN => "=> %s\n"
}
# :NULL / :DEFAULT / :CLASSIC / :SIMPLE / :INF_RUBY / :XMP
# IRB.conf[:PROMPT_MODE] = :SIMPLE
IRB.conf[:PROMPT_MODE] = :DEFAULT
# IRB.conf[:PROMPT_MODE] = :CUSTOM

IRB.conf[:ALIASES] = {
  :quit => 'exit',
  :q => 'exit',
  :wirb => 'Wirb.start',
  :hirb => 'Hirb.enable'
}

# IRB.conf[:USE_AUTOCOMPLETE] = true
# IRB.conf[:COMPLETOR] = :type

# def history(count = 0)
#   # Get history into an array
#   histories = Readline::HISTORY.to_a

#   count ||= 0
#   if count > 0
#     from = histories.length - count
#     histories = histories[from..-1]
#   end

#   puts histories
# end

def i_m(obj)
  list = obj.methods
  anc = obj.class.ancestors - [obj.class]
  anc.each {|a| list -= a.instance_methods }
  list.sort
end

def json_pp(json)
  require 'json'
  puts JSON.pretty_generate(JSON.parse(json))
end

def mem_size(obj)
  case obj
  when String
    obj.bytesize
  when Integer
    obj.size
  when Hash
    sum = 0
    obj.each do |key, val|
      sum += mem_size(key)
      sum += mem_size(val)
    end
    sum
  when Array
    obj.reduce(0) do |sum, val|
      sum + mem_size(val)
    end
  else
    ObjectSpace.memsize_of(obj)
  end
end


## trace
# proc_object = proc do |event, file, line, id, binding, klass|
#   puts "#{event} in #{file}/#{line} #{id} #{klass}"
# end

# set_trace_func(proc_object)

# def which(binary)
#    ENV["PATH"].split(File::PATH_SEPARATOR).find {|p| File.exists?( File.join( p, binary ) ) }
# end
