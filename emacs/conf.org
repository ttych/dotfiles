#+TITLE: literal emacs configuration
#+AUTHOR: ttych
#+DATE: 2022-02-12
#+STARTUP: content

* Configuration
** General
*** debug
   #+begin_src emacs-lisp :tangle no
     (setq debug-on-error t)
   #+end_src
**** inheritance
    #+begin_src emacs-lisp :tangle no
      (defun derived-mode-parents (mode)
        (and mode (cons mode (derived-mode-parents
                              (get mode 'derived-mode-parent)))))
    #+end_src

    examples:
    - (derived-mode-parents 'html-mode)
    - (derived-mode-parents 'ruby-mode)
    - (derived-mode-parents 'python-mode)
    - (derived-mode-parents 'lisp-mode)
    - (derived-mode-parents 'org-mode)
*** warn
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq-default
      ad-redefinition-action (quote warn)
      )
   #+END_SRC
*** help
    Sort apropos by relevancy.
    #+BEGIN_SRC emacs-lisp :tangle no
      (setq apropos-sort-by-score t)
    #+END_SRC

   #+begin_SRC emacs-lisp :tangle no
     (setq-default
      help-window-select nil
      )
   #+END_SRC
**** tooltip
     #+BEGIN_SRC emacs-lisp :tangle yes
       (tooltip-mode -1)
       (setq tooltip-use-echo-area t)
     #+END_SRC
*** limits
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
       global-mark-ring-max 32
       kill-ring-max 120
       mark-ring-max 32
       max-lisp-eval-depth 2000
       ;; large-file-warning-threshold 100000000
       )
    #+END_SRC
*** message
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun no-msg (function)
        "Prevent FUNCTION from showing `Wrote <FILE>' messages.
         (The messages are still logged to `*Messages*'.)"
        (let ((inhibit-message  t))
          (funcall function)))
    #+END_SRC
    To add:
    (advice-add 'recentf-save-list :around 'no-msg)

    To remove:
    (advice-remove 'recentf-save-list 'no-msg)
*** proxy
   #+begin_src emacs-lisp :tangle yes
     (if (file-exists-p (expand-file-name (format "%s/conf/proxy.el" user-emacs-directory)))
         (load-file (expand-file-name (format "%s/conf/proxy.el" user-emacs-directory)))
       )
   #+end_src
*** library
**** load
   #+begin_src emacs-lisp :tangle yes
     (setq-default
      load-prefer-newer t
      )
   #+end_src
**** local
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defvar elisp-dir (expand-file-name "elisp" user-emacs-directory)
       "This directory houses packages that are not yet available in ELPA (or MELPA).")
     (unless (file-exists-p elisp-dir)
       (make-directory elisp-dir))
     (add-to-list 'load-path elisp-dir)
   #+END_SRC
*** encoding
   #+begin_src emacs-lisp :tangle no
     (prefer-coding-system 'utf-8)
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-language-environment 'utf-8)
   #+end_src
*** packages
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'package)
     (package-initialize)

     (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                              ("melpa" . "https://melpa.org/packages/")
                              ("org" . "https://orgmode.org/elpa/")))

     (unless package-archive-contents
       (package-refresh-contents))

     (global-set-key (kbd "C-x P") 'list-packages)

     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (setq-default use-package-always-ensure t)

     (use-package use-package-ensure-system-package :ensure t)
   #+END_SRC
*** prompt
**** yes or no
    Replace yes/no prompts with y/n.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
**** non existant buffer/file
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq confirm-nonexistent-file-or-buffer nil)
    #+END_SRC
**** buffer with attached process
     remove prompt for killing a buffer with a live process attached to it
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq kill-buffer-query-functions
             (remq 'process-kill-buffer-query-function
                   kill-buffer-query-functions))
     #+END_SRC
*** server
   #+BEGIN_SRC emacs-lisp :tangle no
     (server-start)
   #+END_SRC
*** daemon
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun client-save-kill-emacs()
       " This is a function that can bu used to shutdown save buffers and
         shutdown the emacs daemon. It should be called using
         emacsclient -e '(client-save-kill-emacs)'.  This function will
         check to see if there are any modified buffers or active clients
         or frame.  If so an x window will be opened and the user will
         be prompted."

       (let (new-frame modified-buffers active-clients-or-frames)

         ;; Check if there are modified buffers or active clients or frames.
         (setq modified-buffers (modified-buffers-exist))
         (setq active-clients-or-frames ( or (> (length server-clients) 1)
                                             (> (length (frame-list)) 1)
                                             ))

         ;; When displaying the number of clients and frames:
         ;; subtract 1 from the clients for this client.
         ;; subtract 2 from the frames this frame (that we just created) and the default frame.
         (when ( or (not active-clients-or-frames)
                    (yes-or-no-p (format "There are currently %d clients and %d frames. Exit anyway?" (- (length server-clients) 1) (- (length (frame-list)) 2))))

           ;; If the user quits during the save dialog then don't exit emacs.
           ;; Still close the terminal though.
           (let((inhibit-quit t))
             ;; Save buffers
             (with-local-quit
               (save-some-buffers))

             (if quit-flag
                 (setq quit-flag nil)
               ;; Kill all remaining clients
               (progn
                 (dolist (client server-clients)
                   (server-delete-client client))
                 ;; Exit emacs
                 (kill-emacs)))
             ))
         )
       )

     (defun modified-buffers-exist()
       "This function will check to see if there are any buffers
         that have been modified.  It will return true if there are
         and nil otherwise. Buffers that have buffer-offer-save set to
         nil are ignored."
       (let (modified-found)
         (dolist (buffer (buffer-list))
           (when (and (buffer-live-p buffer)
                      (buffer-modified-p buffer)
                      (not (buffer-base-buffer buffer))
                      (or
                       (buffer-file-name buffer)
                       (progn
                         (set-buffer buffer)
                         (and buffer-offer-save (> (buffer-size) 0))))
                      )
             (setq modified-found t)
             )
           )
         modified-found
         )
       )
   #+END_SRC
*** buffer
**** scratch buffer
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun create-scratch-buffer nil
	"create a scratch buffer"
	(interactive)
	(setq bufname (generate-new-buffer-name "*scratch*"))
	(switch-to-buffer (get-buffer-create bufname))
	(org-mode)
	)
    #+END_SRC
**** naming
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
       uniquify-buffer-name-style (quote post-forward)
       uniquify-after-kill-buffer-p t
       uniquify-ignore-buffers-re "^\\*"
       ;; uniquify-separator "/"
       )
    #+END_SRC
**** protected
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defvar *protected-buffers* '("*scratch*" "*Messages*")
        "Buffers that cannot be killed.")

      (defun my/protected-buffers ()
        "Protects some buffers from being killed."
        (dolist (buffer *protected-buffers*)
          (with-current-buffer buffer
            (emacs-lock-mode 'kill))))

      (add-hook 'after-init-hook #'my/protected-buffers)
    #+END_SRC
**** revert
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
       auto-revert-verbose nil
       )
      (global-auto-revert-mode t)
      ;; FIXME
      ;;  	  '(global-auto-revert-non-file-buffers t)
    #+END_SRC
**** ibuffer
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
       ibuffer-expert t
       )

      ;;  (defalias 'list-buffers 'ibuffer)
      (global-set-key (kbd "C-x B") 'ibuffer)
      ;;  (global-set-key (kbd "C-x B") 'ibuffer-other-window)
    #+END_SRC    
*** mini buffer
**** icomplete
   #+BEGIN_SRC emacs-lisp :tangle yes
     (icomplete-mode 1)
     (unless (version< emacs-version "28.1")
       (fido-mode 1))
   #+END_SRC
***** fido
      fido-mode or fido-vertical-mode
*** file
**** auto-save to save-dir
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defvar save-dir (expand-file-name "save/" user-emacs-directory)
	"This folder stores all the automatically generated save/history-files.")
      (unless (file-exists-p save-dir)
	(make-directory save-dir))

      ;; Save all tempfiles in save-dir
      (setq-default
       auto-save-file-name-transforms `((".*" ,save-dir t))
       auto-save-list-file-prefix save-dir
       )
      ;; enable auto-save
      (setq-default
       auto-save-default t
       auto-save-interval 300
       auto-save-visited-mode nil
       )
    #+END_SRC
**** backup
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
       make-backup-files t            ;; make backup files
       backup-directory-alist `((".*" . ,save-dir))
       backup-by-copying t
       version-control t              ;; make numbered backups
       kept-new-versions 10           ;; highest-numbered to keep
       kept-old-versions 2            ;; lowest-numbered to keep
       delete-old-versions t          ;; delete excess backup silently
       vc-make-backup-files t         ;; backup also version-controlled files
       )
    #+END_SRC
**** version-controlled
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
       vc-follow-symlinks t
       )
    #+END_SRC
**** save-place
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
       save-place-forget-unreadable-files nil
       save-place-file (expand-file-name "place" save-dir)
       )
      (save-place-mode 1)
    #+END_SRC
**** Bookmarks
     | Key     | Purpose          |
     |---------+------------------|
     | C-x r m | Set a bookmark   |
     | C-x r l | List bookmarks   |
     | C-x r b | Jump to bookmark |

    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq bookmark-default-file (expand-file-name "bookmarks" save-dir)
            bookmark-save-flag 1)
    #+END_SRC
**** Recent Files
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq recentf-save-file (expand-file-name "recent-files" save-dir)
             recentf-max-menu-items 50
             recentf-max-saved-items 100
             ;; disable recentf-cleanup on Emacs start, because it can cause
             ;; problems with remote files
             ;; recentf-auto-cleanup 'never
             recentf-auto-cleanup 10
             recentf-exclude '("^/var/folders\\.*"
                               "[/\\]\\.elpa/"
                               "COMMIT_EDITMSG\\'"
                               "\\TODO_archive\\'")
             )
       (recentf-mode 1)
       ;; update list periodically, every 5 minutes
       (run-at-time nil (* 5 60) 'recentf-save-list)
       (advice-add 'recentf-save-list :around 'no-msg)
       (advice-add 'recentf-cleanup :around 'no-msg)
     #+END_SRC
*** history
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq-default
      history-delete-duplicates t
      history-length 1000
      savehist-additional-variables '(kill-ring search-ring regexp-search-ring)
      savehist-file (expand-file-name (format "%s/.history" user-emacs-directory))
      savehist-save-minibuffer-history 1
      savehist-autosave-interval (* 5 60)
      )
     (savehist-mode 1)
   #+END_SRC
*** register
    | Key       | Purpose                                |
    |-----------+----------------------------------------|
    | C-x r n   | Store number in register               |
    | C-x r s   | Store region in register               |
    | C-x r SPC | Store point in register                |
    | C-x r +   | Increment number in register           |
    | C-x r j   | Jump to register                       |
    | C-x r i   | Insert content of register             |
    | C-x r w   | Store window configuration in register |
    | C-x r f   | Store frameset in register             |
*** display
**** Graphical geometry
    Geometry in graphical mode.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
       default-frame-alist (quote ((width . 80) (height . 45)))
       )
    #+END_SRC
**** split
    Tend to favor horizontal split.

    #+BEGIN_SRC emacs-lisp :tangle yes
      ;; (setq split-height-threshold 80)
      (setq split-width-threshold 140)
    #+END_SRC
**** Visual defaults
    Inhibit messages, ...

    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
       inhibit-startup-buffer-menu t
       inhibit-startup-message t
       inhibit-startup-echo-area-message t
       inhibit-startup-screen t
       initial-frame-alist (quote ((top . 10) (left . 30) (width . 90) (height . 50)))
       initial-major-mode (quote org-mode)
       initial-scratch-message nil
       gnus-inhibit-startup-message t
       )
    #+END_SRC

    Remove tool-bar, scroll-bar, ...

    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
      ;; scroll-bar-mode nil
       scroll-conservatively 100000
       scroll-margin 0
       scroll-preserve-screen-position t
       menu-bar-mode nil
       tool-bar-mode nil
       )

       (menu-bar-mode -1)
       ;; (scroll-bar-mode -1)
       (tool-bar-mode -1)
    #+END_SRC

    Edition information:

    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
       blink-cursor-mode t
       display-line-numbers-type (quote absolute)
       cursor-in-non-selected-windows nil
       global-font-lock-mode t
       transient-mark-mode t
       fill-column 80
       )

      (global-display-line-numbers-mode t)
      (global-hl-line-mode t)
      ;; (set-face-background hl-line-face "gray25")
    #+END_SRC
**** pagination
    Retaining 1 line of context on page move:
    #+BEGIN_SRC emacs-lisp :tangle yes
    (setq next-screen-context-lines 1)
    #+END_SRC
**** mode line
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
       display-time-mode nil
       line-number-mode t
       column-number-mode t
       display-battery-mode nil
       size-indication-mode t
       )
    #+END_SRC
**** fonts
    Spending most of our time on GNU Emacs, it is important to use a font that
    will make our reading easier.

    Source Code Pro is one of the best monospaced font. Installed it with your
    system manager.

    #+BEGIN_SRC emacs-lisp :tangle no
      (set-face-attribute 'default nil :font "Source Code Pro Medium")
      (set-fontset-font t 'latin "Noto Sans")
    #+END_SRC
**** performance
     Set to t will cause Emacs to fully redraw the display before it processes
     queued input events.

     Set to nil, the obvious benefit here is that the user will get a smoother
     typing experience.
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq redisplay-dont-pause t)
     #+END_SRC
*** movement
    | Key     | Purpose                             |
    |---------+-------------------------------------|
    | C-M-f   | Move forward by s-expression        |
    | C-M-b   | Move backward by s-expression       |
    | C-M-k   | kill-sexp                           |
    |---------+-------------------------------------|
    | C-M-d   | Move down into a list               |
    | C-M-u   | Move up out of a list               |
    | C-M-n   | Move forward to the next list       |
    | C-M-p   | Move backward to the previous list  |
    |---------+-------------------------------------|
    | M-}     | Move forward to end of paragraph    |
    | M-{     | Move backward to start of paragraph |
    |---------+-------------------------------------|
    | M-a     | Move to beginning of sentence       |
    | M-e     | Move to end of sentence             |
    |---------+-------------------------------------|
    | C-M-a   | Move to beginning of defun          |
    | C-M-e   | Move to end of defun                |
    |---------+-------------------------------------|
    | C-x ]   | Moves forward one page              |
    | C-x [   | Moves backward one page             |
    |---------+-------------------------------------|

    Other movement commands

    | Key         | Purpose                                                               |
    |-------------+-----------------------------------------------------------------------|
    | M-r         | Re-positions the point to the top left, middle left, or bottom left   |
    | C-l         | Re-centers the point to the middle, top, or bottom in the buffer      |
    | C-M-l       | Re-positions the comment or definition so it is in view in the buffer |
    | C-x C-n     | Sets the goal column, the horizontal position for the point           |
    | C-u C-x C-n | Resets the goal column, the horizontal position for the point         |
    | M-g M-g     | Go to line                                                            |
    | M-g TAB     | Go to column                                                          |
    | M-g c       | Go to character position                                              |
**** visual-line / logical-line
     global move by visual-line (t) or by logical-line (-1)
     #+BEGIN_SRC emacs-lisp :tangle yes
       (global-visual-line-mode -1)
     #+END_SRC

     truncate lines
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq-default
        truncate-lines nil
        word-wrap nil)
     #+END_SRC
**** subword / superword
     (global-)subword-mode: Minor mode that treats CamelCase as distinct words
     (global-)superword-mode: Minor mode that treats snake_case as one word
**** sentence
     nil means a single space ends a sentence.
     #+BEGIN_SRC emacs-lisp :tangle yes
     (setq-default sentence-end-double-space nil)
     #+END_SRC
**** scoll
     | Key       | Purpose                             |
     |-----------+-------------------------------------|
     | C-v       | Scroll down a near full screen      |
     | M-v       | Scroll up a near full screen        |
     | C-M-v     | Scroll down the other window        |
     | C-M-S-v   | Scroll up the other window          |
     |-----------+-------------------------------------|
     | C-x <     | Scroll left                         |
     | C-<next>  | Scroll left                         |
     | C-<prior> | Scroll right                        |
     | C-x >     | Scroll right                        |
     |-----------+-------------------------------------|
     | M-<       | Move to the beginning of the buffer |
     | M->       | Move to the end of the buffer       |

     #+BEGIN_SRC emacs-lisp :tangle yes
     (put 'scroll-left 'disabled nil)
     #+END_SRC
**** mark
     | Key               | Purpose                     |
     |-------------------+-----------------------------|
     | M-h               | Marks the next paragraph    |
     | C-x h             | Marks the whole buffer      |
     | C-M-h             | Marks the next defun        |
     | C-x C-p           | Marks the next page         |
     | M-@               | Marks the next word         |
     | C-M-<SPC> , C-M-@ | Marks the next s-expression |
     | C-<SPC> , C-g     | Deactivates the region      |
***** selection compatibility
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq-default
        delete-selection-mode t
        shift-select-mode t
        )
     #+END_SRC
***** Common User Access
      #+BEGIN_SRC emacs-lisp :tangle no
        (setq-default
         cua-mode t
         )
      #+END_SRC
***** mark only
      #+BEGIN_SRC emacs-lisp :tangle no
        (defun push-mark-no-activate ()
          "Pushes `point' to `mark-ring' and does not activate the region
                           Equivalent to \\[set-mark-command] when \\[transient-mark-mode] is disabled"
          (interactive)
          (push-mark (point) t nil)
          (message "Pushed mark to ring"))

        (global-set-key (kbd "C-`") 'push-mark-no-activate)

        (defun jump-to-mark ()
          "Jumps to the local mark, respecting the `mark-ring' order.
                  This is the same as using \\[set-mark-command] with the prefix argument."
          (interactive)
          (set-mark-command 1))
        (global-set-key (kbd "M-`") 'jump-to-mark)

        (defun exchange-point-and-mark-no-activate ()
          "Identical to \\[exchange-point-and-mark] but will not activate the region."
          (interactive)
          (exchange-point-and-mark)
          (deactivate-mark nil))
        (define-key global-map [remap exchange-point-and-mark] 'exchange-point-and-mark-no-activate)
      #+END_SRC
**** search
     | Key   | Purpose                             |
     |-------+-------------------------------------|
     | C-s   | incremental search                  |
     | C-r   | backward incremental search         |
     | C-M-s | regexp incremental search           |
     | C-M-r | regexp backward incremental search  |
     | RET   | pick the selected match             |
     |-------+-------------------------------------|
     | M-s w | Isearch forward for word            |
     | M-s _ | Isearch forward for symbol          |
     | M-s . | Isearch forward for symbol at point |
     |-------+-------------------------------------|

     | Isearch Key | Purpose                                                |
     |-------------+--------------------------------------------------------|
     | M-n         | Move to next item in search history                    |
     | M-p         | Move to previous item in search history                |
     | C-M-i       | “TAB”-complete search string                           |
     | C-s C-s     | Begins Isearch against last search string              |
     | C-r C-r     | Begins backward Isearch against last search string     |
     |-------------+--------------------------------------------------------|
     | C-w         | Add word at point to search string                     |
     | C-M-y       | Add character at point to search string                |
     | M-s C-e     | Add rest of line at point to search string             |
     | C-y         | Yank from clipboard to search string                   |
     |-------------+--------------------------------------------------------|
     | M-s c       | Toggles case-sensitivity                               |
     | M-s r       | Toggles regular-expression mode                        |
     | M-s w       | Toggles word mode                                      |
     | M-s _       | Toggles symbol mode                                    |
     | M-s <SPC>   | Toggles lax whitespace matching                        |
     | M-s '       | Toggles character folding                              |
     |-------------+--------------------------------------------------------|
     | M-s o       | Activate occur on current search string inside Isearch |

***** occur
      | Key   | Purpose |
      |-------+---------|
      | M-s o | occur   |

      | Occur Key | Purpose                                          |
      |-----------+--------------------------------------------------|
      | M-n , M-p | Go to next and previous occurrence               |
      | < , >     | Go to beginning and end of buffer                |
      | g         | Revert the buffer, refreshing the search results |
      | q         | Quits occur mode                                 |
      | e         | Switches to occur edit mode                      |
      | C-c C-c   | Exits occur edit mode and applies changes        |
***** character folding
      enable character folding by default or use (M-s ')

     #+BEGIN_SRC emacs-lisp :tangle no
       (setq-default
        search-default-mode 'char-fold-to-regexp)
     #+END_SRC
**** grep
     | Command       | Purpose                                                                         |
     |---------------+---------------------------------------------------------------------------------|
     | M-x grep      | Prompts for arguments to pass to grep (low-level)                               |
     | M-x grep-find | Prompts for arguments to pass to grep and find (low-level)                      |
     | M-x lgrep     | Prompts for query and glob pattern to search for with grep                      |
     | M-x rgrep     | Prompts for query and glob pattern then recursively searches with grep and find |
     | M-x rzgrep    | Like M-x rgrep but searches compressed gzip files                               |

     | grep Key | Purpose                |
     |----------+------------------------|
     | M-g M-n  | Jump to next match     |
     | M-g M-p  | Jump to previous match |
*** editing
**** input characters
    Insert characters with C-q.
    [[http://www.unicode.org/charts/][Unicode charts]].

    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq read-quoted-char-radix 16)
    #+END_SRC
**** M-x set-input-method
    For mathematics, use TeX as input-method.
    Use describe-input-method to see available chars.
**** tab vs. space
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
       tab-width 4                    ;; tab width
       indent-tabs-mode nil           ;; indent use space only
       backward-delete-char-untabify-method nil  ;; delete 1 char
       tab-always-indent (quote complete)       ;; indent first, then completion
       )
    #+END_SRC
**** re-enable emacs disabled feature
    Some functionality are disabled by default. Since I used them, I
    disable the disabled.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (put 'downcase-region 'disabled nil)
      (put 'upcase-region 'disabled nil)
    #+END_SRC
**** newline
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
       next-line-add-newlines nil
       require-final-newline t
       )
    #+END_SRC
**** empty line
    #+BEGIN_SRC emacs-lisp :tangle yes
    (setq-default
      indicate-empty-lines nil
       )
    #+END_SRC
**** whitespace
    It is often annoying to see unnecessary blank spaces at the end of a line or
    file. Let's get ride of them:

    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
       whitespace-line-column 80
       whitespace-style '(face tabs empty trailing lines-tail)
       show-trailing-whitespace t
       delete-trailing-lines t
       )
      ;; (dolist (hook '(prog-mode-hook text-mode-hook org-mode-hook))
      ;;  (add-hook hook #'whitespace-mode))
      (add-hook 'prog-mode-hook 'whitespace-mode)
      (add-hook 'text-mode-hook 'whitespace-mode)

      (delight 'whitespace-mode " ¬" 'whitespace)

       (add-hook 'before-save-hook 'my/delete-trailing-whitespace)
       (defun my/delete-trailing-whitespace ()
         (when (derived-mode-p 'prog-mode)
           (delete-trailing-whitespace)))
    #+END_SRC
**** completion
***** hippe-expand
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                                try-expand-dabbrev-all-buffers
                                                try-expand-dabbrev-from-kill
                                                try-complete-file-name-partially
                                                try-complete-file-name
                                                try-expand-all-abbrevs
                                                try-expand-list
                                                try-expand-line
                                                try-complete-lisp-symbol-partially
                                                try-complete-lisp-symbol))
       (global-set-key (kbd "M-/") #'hippie-expand)
     #+END_SRC
**** open-line
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun open-line-below ()
	(interactive)
	(end-of-line)
	(newline)
	(indent-for-tab-command))

      (defun open-line-above ()
	(interactive)
	(beginning-of-line)
	(newline)
	(forward-line -1)
	(indent-for-tab-command))
    #+END_SRC
**** region / selection
***** kill-region vs. kill-line
     I find it useful to delete a line and a region with only =C-w=.

     #+BEGIN_SRC emacs-lisp :tangle no
       (defadvice kill-region (before slick-cut activate compile)
         "When called interactively with no active region, kill a single line instead."
         (interactive
          (if mark-active (list (region-beginning) (region-end))
            (list (line-beginning-position)
                  (line-beginning-position 2)))))
     #+END_SRC
***** narrow / widen
     #+BEGIN_SRC emacs-lisp :tangle no
       (put 'narrow-to-region 'disabled nil)
     #+END_SRC
**** structure
***** paren
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq-default
        show-paren-delay 0
        )
       (show-paren-mode 1)
     #+END_SRC
**** auto
***** electric-pair-mode
    #+BEGIN_SRC emacs-lisp :tangle no
    (add-hook 'prog-mode-hook 'electric-pair-local-mode)
    #+END_SRC
**** spelling
***** abbrev
     According to a list of misspelled words, =abbrev= auto-correct these words on
     the fly.

     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq-default
        abbrev-file-name (expand-file-name (format "%s/conf/abbrev_defs" user-emacs-directory))
        save-abbrevs 'silent
        abbrev-mode t
        )
       (if (file-exists-p abbrev-file-name)
           (quietly-read-abbrev-file))

       (global-set-key (kbd "C-x a TAB") 'expand-abbrev)
       (global-set-key (kbd "C-x a a")   'add-mode-abbrev)
       (global-set-key (kbd "C-x a e")   'edit-abbrevs)
       (global-set-key (kbd "C-x a k")   'kill-all-abbrevs)
       (global-set-key (kbd "C-x a l")   'list-abbrevs)
       (global-set-key (kbd "C-x a s")   'write-abbrev-file)

       ;; (dolist (hook '(erc-mode-hook
       ;;                 emacs-lisp-mode-hook
       ;;                 text-mode-hook))
       ;; (add-hook hook #'abbrev-mode))

       (delight 'abbrev-mode nil 'abbrev)
     #+END_SRC
***** dictionnary
     No one is immune to spelling mistakes. So I like to check the spelling of the
     document once it has been written. To do this, I use =hunspell=, the modern
     spell checker.

     *NOTE:* the reason I prefer =hunspell= to =aspell= is that according to the
     latest news, hunspell has made it possible to be more consistent on fly
     spells. However, most people still use =aspell= because it allows you to spot
     errors in camelCase, convenient for when you program. Personally, I just want to
     check the spelling in the comments and not in the whole document, so =hunspell= is
     perfect for me.

     To use =hunspell= and the desired dictionaries on GNU Emacs, you must first
     install them (e.g. =hunspell-en_US=, =hunspell-fr=) with the package manager of
     your operating system.

     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq-default
        ispell-dictionary "en_US"
        ispell-dictionary-alist
        '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
          ("fr_FR" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "fr_FR") nil utf-8))
        ispell-current-dictionary ispell-dictionary
        ispell-really-hunspell t
        ispell-silently-savep t
        ;;ispell-program-name (executable-find "hunspell")
        ispell-extra-args '("--sug-mode=ultra")
        )

       (defun my/switch-language ()
         "Switches between the English and French language."
         (interactive)
         (let* ((current-dictionary ispell-current-dictionary)
                (new-dictionary (if (string= current-dictionary "fr_FR") "en_US" "fr_FR")))
           (ispell-change-dictionary new-dictionary)
           ;; (if (string= new-dictionary "fr_FR")
           ;;     (langtool-switch-default-language "fr")
           ;;   (langtool-switch-default-language "en"))

           ;; Clears all these old errors after switching to the new language
           (if (and (boundp 'flyspell-mode) flyspell-mode)
               (flyspell-mode 0)
             (flyspell-mode 1))
           (message "Dictionary switched from %s to %s" current-dictionary new-dictionary))
         )

       (global-set-key (kbd "M-] e s") 'ispell-buffer)
       (global-set-key (kbd "M-] e d") 'my/switch-language)

       ;; (defun dictionary-switch()
       ;;   (interactive)
       ;;   (let* ((dic ispell-current-dictionary)
       ;; 		 (change (if (string= dic "english") "fr_FR" "english")))
       ;; 	(ispell-change-dictionary change)
       ;; 	(message "Dictionary switched from %s to %s" dic change)
       ;; 	))
       ;; (global-set-key (kbd "M-] s d") 'dictionary-switch)
     #+END_SRC
***** flyspell
     For the other words that would not be in my list of abbreviations, =flyspell=
     enables spell checking on-the-fly in GNU Emacs.

     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq-default
        flyspell-abbrev-p t
        flyspell-default-dictionary ispell-current-dictionary
        flyspell-issue-message-flag nil
        flyspell-issue-welcome-flag nil
        )

       ;; (dolist (hook '(text-mode-hook org-mode markdown-mode))
       ;;   (add-hook hook (lambda () (flyspell-mode 1))))
       ;; (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
       ;;   (add-hook hook (lambda () (flyspell-mode -1))))

       ;; (dolist (hook '(prog-mode-hook))
       ;;   (add-hook hook (lambda () (flyspell-prog-mode 1))))
       ;; (dolist (hook '(enh-ruby-mode))
       ;;   (add-hook hook (lambda () (flyspell-prog-mode -1))))

       (add-hook 'text-mode-hook 'flyspell-mode)
       (add-hook 'prog-mode-hook 'flyspell-prog-mode)

       ;; (delight 'flyspell-mode " ϝ" 'flyspell)
       (delight 'flyspell-mode nil 'flyspell)
     #+END_SRC
*** indentation
    #+BEGIN_SRC emacs-lisp :tangle yes
      ;; 2 SPACES - INDENTED - MODES
      (defvar 2-spaces-indented-modes
        '(ruby-mode
          html-mode
          yaml-mode
          ))
      (dolist (mode 2-spaces-indented-modes)
        (add-hook (intern (format "%s-hook" mode))
                  (lambda ()
                    (setq indent-tabs-mode nil
                          tab-width 2
                          )
                    )))

      ;; 4 SPACES - INDENTED - MODES
      (defvar 4-spaces-indented-modes
        '(python-mode
          groovy-mode
          markdown-mode
          ))
      (dolist (mode 4-spaces-indented-modes)
        (add-hook (intern (format "%s-hook" mode))
                  (lambda ()
                    (setq indent-tabs-mode nil
                          tab-width 4
                          )
                    )))

      ;; TAB 4 - INDENTED - MODES
      (defvar tab-indented-modes
        '(makefile-mode
          ))
      (dolist (mode tab-indented-modes)
        (add-hook (intern (format "%s-hook" mode))
                  (lambda ()
                    (setq indent-tabs-mode t
                          tab-width 4
                          )
                    )))
    #+END_SRC
*** dired
   For those who didn't know, GNU Emacs is also a file explorer.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq-default
      dired-auto-revert-buffer (quote dired-directory-changed-p)
      ;; dired-auto-revert-buffer t
      dired-dwim-target t
      dired-hide-details-hide-symlink-targets nil
      dired-listing-switches "-alh"
      dired-ls-F-marks-symlinks nil
      dired-recursive-copies 'always
      dired-recursive-deletes 'always
      )

     (require 'dired-x)

     ;; (use-package dired-narrow
     ;;   :bind (("C-c C-n" . dired-narrow)
     ;;          ("C-c C-f" . dired-narrow-fuzzy)
     ;;          ("C-c C-r" . dired-narrow-regexp)))

     ;; (use-package dired-subtree
     ;;   :bind (:map dired-mode-map
     ;;               ("<backtab>" . dired-subtree-cycle)
     ;;               ("<tab>" . dired-subtree-toggle)))
   #+END_SRC
*** midnight
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'midnight)
     (setq midnight-period 21600) ;; (eq (* 6 60 60) "6 hours")

     (setq-default
      clean-buffer-list-delay-general 2
      clean-buffer-list-delay-special (* 24 3600)
      clean-buffer-list-kill-buffer-names (nconc clean-buffer-list-kill-buffer-names
						 '("*buffer-selection*"
						   "*Finder*"
						   "*Finder Category*"
						   "*Finder-package*"
						   "*RE-Builder*"
						   "*vc-change-log*"))
      clean-buffer-list-kill-regexps (nconc clean-buffer-list-kill-regexps
					    '("\\`\\*Customize .*\\*\\'"
					      "\\`\\*\\(Wo\\)?Man .*\\*\\'"))
      clean-buffer-list-kill-never-buffer-names (nconc clean-buffer-list-kill-never-buffer-names
						       '("*eshell*"
							 "*ielm*"
							 "*mail*"
							 "*w3m*"
							 "*w3m-cache*"))
      clean-buffer-list-kill-never-regexps (nconc clean-buffer-list-kill-never-regexps
						  '("\\`\\*tramp/.*\\*\\`"
						    "\\`\\*ftp .*\\*\\`"))
      )
   #+END_SRC       
*** completion
**** ido
      | ido Key     | Purpose                                                                 | Where                  |
      |-------------+-------------------------------------------------------------------------+------------------------|
      | C-s / C-r   | Move to the next and previous match                                     | All                    |
      | TAB         | Traditional non-IDO TAB-completion                                      | Dirs / Files / Buffers |
      | RET         | Open selected match                                                     |                        |
      | C-d         | Open M-x dired buffer in current directory                              | Dirs / Files           |
      | //          | Go to root directory /                                                  | Files                  |
      | ~/          | Go to home directory ~                                                  | Dirs / Files           |
      | Backspace   | Delete a character or go up one directory                               | All                    |
      | C-SPC / C-@ | Restricts completion list to anything that matches the current input    | All                    |
      | M-d         | Searches for the input in all sub-directories                           | Files                  |
      | C-k         | Kills the currently focused buffer / deletes the file                   | Files / Buffers        |
      | M-m         | Creates a new sub-directory to the directory you’re in                  | Files                  |
      |-------------+-------------------------------------------------------------------------+------------------------|
      | C-a         | Toggles showing ignored files (ido-ignore-files)                        | Files / Buffers        |
      | C-c         | Toggles if searching buffer/file should ignore case (ido-case-fold)     | Dirs / Files / Buffers |
      | C-t         | Toggles matching by Emacs regular expression                            | All                    |
      | C-p         | Toggles prefix matching, match only beginning instead of any part of it | Files                  |
      |-------------+-------------------------------------------------------------------------+------------------------|
      | C-f         | Reverts to the old find-file completion engine                          | Files                  |
      | C-b         | Reverts to the old switch-buffer completion engine                      | Buffers                |

      #+BEGIN_SRC emacs-lisp :tangle no
        (setq ido-everywhere t
              ido-create-new-buffer 'always
              ido-enable-flex-matching t
              ido-max-window-height 1
              ido-use-faces t
              ido-file-extensions-order '(".org" ".txt" ".py" ".rb" ".json" ".yml")
              )
        (ido-mode 1)

        (defun ido-recentf-open ()
          "Use `ido-completing-read' to \\[find-file] a recent file"
          (interactive)
          (if (find-file (ido-completing-read "Find recent file: " recentf-list))
              (message "Opening file...")
            (message "Aborting")))
     #+END_SRC
***** ignore
      | Variables              | Description                                                |
      |------------------------+------------------------------------------------------------|
      | ido-ignore-buffers     | Takes a list of buffers to ignore in C-x b                 |
      | ido-ignore-directories | Takes a list of directories to ignore in C-x d and C-x C-f |
      | ido-ignore-files       | Takes a list of files to ignore in C-x C-f                 |

      To ignore some extensions:
      (setq ido-ignore-extensions t)

      To configure extensions to ignore:
      variable: completion-ignored-extensions
***** work directory
      Work directories are recently used directories that Ido caches.

      | Variable                               | Description                                                             |
      |----------------------------------------+-------------------------------------------------------------------------|
      | ido-work-directory-list                | cached directory list                                                   |
      | ido-work-directory-list-ignore-regexps | prevent ido from caching matching                                       |
      | ido-work-directory-match-only          | force Ido to disregard directories that do not match your current input |
      | ido-auto-merge-delay-time              | work directory merge delay                                              |

      | Key       | Description                                                                  |
      |-----------+------------------------------------------------------------------------------|
      | M-n / M-p | Cycles through the next or previous work directories.                        |
      | M-k       | Kills (removes) the active work directory from the list.                     |
      | M-s       | M-s forces ido to search the list of work directories for the current input. |
*** commands
**** macros
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defvar macros_el
        (expand-file-name "macros" elisp-dir))
      (if (file-exists-p macros_el)
          (load-file macros_el))
    #+END_SRC
**** bindings
     https://www.masteringemacs.org/article/mastering-key-bindings-emacs

    #+BEGIN_SRC emacs-lisp :tangle yes
      ;; (global-set-key [f1] 'shell)
      (global-set-key (kbd "<f5>") 'revert-buffer)
      (global-set-key (kbd "<f6>") 'shell)
      (global-set-key (kbd "ESC <f6>") 'term)
      (global-set-key (kbd "<f8>") 'magit)
      (global-set-key (kbd "ESC <f8>") 'magit-file-dispatch)
      (global-set-key (kbd "<f9>") 'recentf-open-files)
      ;; (global-set-key (kbd "<f9>") 'ido-recentf-open)
      (global-set-key (kbd "M-i") 'imenu)
      ;; kill-word
      (global-set-key (kbd "M-<deletechar>") 'kill-word)
      ;; Search <M-s>
      (global-set-key (kbd "M-s r") 'query-replace-regexp)
      (global-set-key (kbd "M-s M-%") 'query-replace-regexp)
      ;; (global-set-key (kbd "M-s O") 'multi-occur)
      (global-set-key (kbd "M-s O") 'multi-occur-in-matching-buffers)
      (global-set-key (kbd "M-s g") 'rgrep)
      (global-set-key (kbd "M-s f f") 'find-dired)
      (global-set-key (kbd "M-s f n") 'find-name-dired)
      (global-set-key (kbd "M-s f r") 'find-lisp-find-dired)
      ;; window
      (global-set-key (kbd "M-o") 'other-window)
      ;; windmove
      (windmove-default-keybindings)
      (global-set-key (kbd "M-[ 1 ; 2 A") 'windmove-up)
      (global-set-key (kbd "M-[ 1 ; 2 B") 'windmove-down)
      ;; (global-set-key (kbd "C-<up>") 'windmove-up)
      ;; (global-set-key (kbd "M-[ 1 ; 5 a") 'windmove-up)
      ;; (global-set-key (kbd "C-<down>") 'windmove-down)
      ;; (global-set-key (kbd "M-[ 1 ; 5 b") 'windmove-down)
      ;; (global-set-key (kbd "C-<left>") 'windmove-left)
      ;; (global-set-key (kbd "M-[ 1 ; 5 d") 'windmove-left)
      ;; (global-set-key (kbd "C-<right>") 'windmove-right)
      ;; (global-set-key (kbd "M-[ 1 ; 5 c") 'windmove-right)
      ;; window
      (global-set-key (kbd "C-x 9") 'delete-windows-on)
      (global-set-key (kbd "C-x C-^") 'shrink-window)
      ;; kmacro
      (global-set-key (kbd "C-x C-k i") 'insert-kbd-macro)
      ;; comment
      (global-set-key (kbd "M-;") 'comment-line)
      (global-set-key (kbd "M-#") 'comment-line)
      ;; (global-set-key (kbd "M-#") 'my-comment-dwim)

      ;; myMenu
      (global-set-key (kbd "M-] b s") 'scratch)
      (global-set-key (kbd "M-] b S") 'create-scratch-buffer)
      (global-set-key (kbd "M-] b c") 'scratch)
      (global-set-key (kbd "M-] f b") 'bookmark-jump)
      (global-set-key (kbd "M-] f l") 'bookmark-bmenu-list)
      (global-set-key (kbd "M-] f m") 'bookmark-set)
      (global-set-key (kbd "M-] f r") 'recentf-open-files)

      (global-set-key (kbd "M-] m f") 'auto-fill-mode)
      (global-set-key (kbd "M-] m l") 'display-line-numbers-mode)
      (global-set-key (kbd "M-] m w") 'whitespace-mode)
      (global-set-key (kbd "M-] m S") 'auto-save-mode)
      (global-set-key (kbd "M-] m t") 'toggle-truncate-lines)

      (global-set-key (kbd "M-] \\") 'align-regexp)

      (global-set-key (kbd "M-] <deletechar>")
                      (lambda ()
                        (interactive)
                        (join-line -1)))
      (global-set-key (kbd "M-] M-o") 'open-line-below)
      (global-set-key (kbd "M-] M-O") 'open-line-above)

      ;; (define-key key-translation-map (kbd "M-]") (kbd "M-_"))
    #+END_SRC
*** local environment
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun load-directory (dir)
        (let ((load-it
               (lambda (f)
                 (load-file (concat (file-name-as-directory dir) f)))
               ))
          (mapc load-it (directory-files dir nil "\\.el$"))))
      (defvar conf-dir (expand-file-name "conf/" user-emacs-directory)
        "conf-dir for emacs configuration directory")
      (load-directory conf-dir)

      (defvar users-settings-dir (expand-file-name "users/" conf-dir)
        "This folder stores user specific setting.")
      (defvar user-settings-file
        (expand-file-name (concat user-login-name ".el")
                          users-settings-dir))
      (if (file-exists-p user-settings-file)
          (load user-settings-file))
    #+END_SRC
*** tramp
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
       tramp-default-method "ssh")

      (defun sudo ()
        "Use TRAMP to `sudo' the current buffer"
        (interactive)
        (when buffer-file-name
          (find-alternate-file
           (concat "/sudo:root@localhost:"
                   buffer-file-name))))
    #+END_SRC
*** web utils
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
       browse-url-browser-function 'browse-url-xdg-open
       request-storage-directory (expand-file-name (format "%s/request/" save-dir))
       url-cookie-file (expand-file-name (format "%s/url/cookies/" save-dir))
       )
    #+END_SRC
*** calendar
    Remembering all the dates is not obvious, especially since some varies every
    year. In order to remember each important date, I recorded the list of important
    dates according to my country, France. It is very likely that some dates are
    different in your country, therefore, adapt the configuration below accordingly.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default
       calendar-week-start-day 1
       calendar-mark-holidays-flag t
       )
      (setq-default
       holiday-bahai-holidays nil
       holiday-hebrew-holidays nil
       holiday-islamic-holidays nil
       holiday-oriental-holidays nil

       holiday-christian-holidays
       '((holiday-fixed 1 6 "Epiphany")
         (holiday-fixed 2 2 "Candlemas")
         (holiday-easter-etc -47 "Mardi Gras")
         (holiday-easter-etc 0 "Easter Day")
         (holiday-easter-etc 1 "Easter Monday")
         (holiday-easter-etc 39 "Ascension")
         (holiday-easter-etc 49 "Pentecost")
         (holiday-fixed 8 15 "Assumption")
         (holiday-fixed 11 1 "All Saints' Day")
         (holiday-fixed 11 2 "Day of the Dead")
         (holiday-fixed 12 6 "Saint Nicholas Day")
         (holiday-fixed 12 25 "Christmas"))
       holiday-general-holidays
       '((holiday-fixed 1 1 "New Year's Day")
         (holiday-fixed 2 14 "Valentine's Day")
         (holiday-fixed 3 8 "International Women's Day")
         (holiday-fixed 10 31 "Halloween")
         (holiday-fixed 11 11 "Armistice of 1918"))
       holiday-local-holidays
       '((holiday-fixed 5 1 "Labor Day")
         (holiday-float 3 0 0 "Grandmothers' Day")
         (holiday-float 5 0 2 "Mother's Day")
         (holiday-float 6 0 3 "Father's Day"))
       )
    #+END_SRC
** minor - extra
*** delight
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package delight :ensure t)
    #+END_SRC
*** try (d)
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package try
        :ensure t
        :defer 5
        )
    #+END_SRC
*** which-key
    It's difficult to remember all the keyboard shortcuts. The =which-key= package
    helps to solve this.

    I used =guide-key= in my past days, but =which-key= is a good replacement.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package which-key
        :ensure t
        :defer 0.2
        :delight
        :config
        (setq which-key-idle-delay 0.5
              which-key-popup-type 'minibuffer
              )
        (which-key-mode 1)
        ;; (which-key-setup-minibuffer)
        )
    #+END_SRC
*** highlight-todo
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package hl-todo
        :ensure t
        :bind (("M-g M-T" . hl-todo-previous)
               ("M-g M-t" . hl-todo-next)
               ("M-g T" . hl-todo-occur))
        :init
        (global-hl-todo-mode)
        :config
        (setq hl-todo-keyword-faces
              '(
                ("BUG"     . "#FF0000")
                ("TODO"    . "#FFD700")
                ("FIXME"   . "#F2AF00")  ;; #FF4500
                ("REFACTO" . "#0000FF")
                ("DELETE"  . "#A020F0")
                ("REMOVE"  . "#A020F0")
                ))
        ;; (add-hook 'prog-mode-hook #'hl-todo-mode 1)
        ;; (add-hook 'text-mode-hook #'hl-todo-mode 1)
        )
    #+END_SRC
*** expand-region
     Increase region by semantic units. It tries to be smart about it and adapt to
     the structure of the current major mode.

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package expand-region
         :ensure t
         :bind (("M-_" . er/contract-region)
                ("M-+" . er/expand-region))
         )
     #+END_SRC
*** yasnippet
    #+BEGIN_QUOTE
    YASnippet is a template system for Emacs. It allows you to type an abbreviation
    and automatically expand it into function templates.

    [[https://github.com/joaotavora/yasnippet][João Távora]]
    #+END_QUOTE

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package yasnippet
        :ensure t
        :delight yas-minor-mode " ϔ"
        :bind (("M-] y n" . yas-new-snippet)
               ("M-] y i" . yas-insert-snippet)
               ("M-] y v" . yas-visit-snippet-file))
        :init
        (yas-global-mode 1)
        )

      (use-package yasnippet-snippets
        :ensure t
        :after yasnippet
        :config
        (yasnippet-snippets-initialize)
        )
    #+END_SRC
*** rainbow-mode
     Colorize colors as text with their value.

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package rainbow-mode
         :ensure t
         :delight
         :config
         (add-hook 'prog-mode-hook 'rainbow-mode)
         (add-hook 'text-mode-hook 'rainbow-mode)
         )
     #+END_SRC
*** ace-window
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package ace-window
        :ensure t
        :bind ([remap other-window] . ace-window)
        :config
        (setq aw-ignore-current t
              aw-scope 'frame)
        )
    #+END_SRC
*** ace-jump-mode
     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package ace-jump-mode
         :ensure t
         :bind (
                ("M-s j" . ace-jump-mode)
                ("M-s k" . ace-jump-char-mode)
                ("M-s l" . ace-jump-line-mode)
                ("M-s M-j" . ace-jump-mode)
                ("M-s M-k" . ace-jump-char-mode)
                ("M-s M-l" . ace-jump-line-mode)
                )
         )
     #+END_SRC
*** avy
     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package avy
         :ensure t
         :bind (("M-g j" . avy-goto-char)
                ("M-g M-j" . avy-goto-char-timer)
                ("M-g k" . avy-goto-word-1)
                ("M-g l" . avy-goto-line))
         )
     #+END_SRC
*** htmlize
    Save buffer in html format.

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package htmlize
        :ensure t
        )
    #+END_SRC
*** anzu
     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package anzu
         :ensure t
         :delight
         :bind (("M-%" . anzu-query-replace)
                ("C-M-%" . anzu-query-replace-regexp))
         :config
         (global-anzu-mode 1)
         )
     #+END_SRC
*** helm
    | Helm Key  | Purpose                              |
    |-----------+--------------------------------------|
    | RET       | Primary action                       |
    | C-e       | Secondary action                     |
    | C-j       | Tertiary action                      |
    | TAB       | Switch to action selector            |
    | C-n , C-p | Next and previous candidate          |
    | M-< , M-> | Beginning and end of completion list |

    | Key         | Purpose                                                                        |
    |-------------+--------------------------------------------------------------------------------|
    | C-x c b     | Resumes last Helm command                                                      |
    | C-x c /     | Invokes the command line utility find on the active buffer’s current directory |
    | C-x c a     | Completes M-x apropos results                                                  |
    | C-x c m     | Completion engine for the man page program                                     |
    | C-x c i     | Lists completions sourced from M-x imenu or Semantic                           |
    | C-x c r     | Interactive regular expression builder                                         |
    | C-x c h r   | Search Emacs topics in M-x info                                                |
    | C-x c M-x   | List completions sourced from M-x                                              |
    | C-x c M-s o | Use Helm to match M-x occur patterns                                           |
    | C-x c C-c g | Show matches from Google Suggest                                               |

     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package helm
         :ensure t
         :init
         (require 'helm-config)
         (setq helm-split-window-in-side-p t
               helm-move-to-line-cycle-in-source t)
         :config
         (helm-mode 1) ;; Most of Emacs prompts become helm-enabled
         (helm-autoresize-mode 1) ;; Helm resizes according to the number of candidates
         ;; (define-key evil-ex-map "b" 'helm-buffers-list) ;; List buffers ( Vim way )
         ;; (global-set-key (kbd "C-x b") 'helm-buffers-list) ;; List buffers ( Emacs way )
         ;; (global-set-key (kbd "C-x r b") 'helm-bookmarks) ;; Bookmarks menu
         ;; (global-set-key (kbd "C-x C-f") 'helm-find-files) ;; Finding files with Helm
         ;; (global-set-key (kbd "M-] M-c") 'helm-calcul-expression) ;; Use Helm for calculations
         ;; (global-set-key (kbd "C-s") 'helm-occur)  ;; Replaces the default isearch keybinding
         ;; (global-set-key (kbd "C-h a") 'helm-apropos)  ;; Helmized apropos interface
         ;; (global-set-key (kbd "M-x") 'helm-M-x)  ;; Improved M-x menu
         ;; (global-set-key (kbd "M-y") 'helm-show-kill-ring)  ;; Show kill ring, pick something to paste
         :bind (
                ("C-x b" . helm-buffers-list)
                ("C-x r b" . helm-bookmarks)
                ("C-x C-f" . helm-find-files)
                ("M-] M-c" . helm-calcul-expression)
                ("C-s"   . helm-occur)
                ("C-h a" . helm-apropos)
                ("M-x" . helm-M-x)
                ("M-y" . helm-show-kill-ring)
                )
         )
     #+END_SRC
*** comment-dwim-2 (d)
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package comment-dwim-2
        :ensure t
        :bind (("M-#" . comment-dwim-2)
               )
        )
    #+END_SRC
*** multiple-cursors (d)
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package multiple-cursors
        :ensure t
        :bind (
               ("M-] c e" . mc/edit-lines)
               ("M-] c n" . mc/mark-next-like-this)
               ("M-] c p" . mc/mark-previous-like-this)
               ("M-] c w" . mc/mark-next-like-this-word)
               ("M-] c W" . mc/mark-previous-like-this-word)
               ("M-] c s" . mc/mark-next-like-this-symbol)
               ("M-] c S" . mc/mark-previous-like-this-symbol)
               ("M-] c c" . mc/mark-all-dwim)
               ("M-] c a" . mc/mark-all-like-this)
               ("M-] c r" . mc/mark-all-in-region)
               ("M-] c +" . mc/mark-more-like-this-extended)
               )
        )
    #+END_SRC
*** grep-a-lot (d)
     Allow multiple grep buffers.

     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package grep-a-lot
         :ensure t
         :config
         ;; (grep-a-lot-setup-keys)
         )
     #+END_SRC
*** find-file-in-project (d)
     From https://github.com/redguardtoo/find-file-in-project.

     #+BEGIN_SRC emacs-lisp :tangle no
      (use-package find-file-in-project
        :ensure t
        )
     #+END_SRC

*** beacon (d)
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package beacon
	:ensure t
	:config
	(beacon-mode 1)
	)
    #+END_SRC
*** zoom-window (d)
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package zoom-window
        :ensure t
        :bind (
               ("M-] z" . zoom-window-zoom)
               ("M-] M-z" . zoom-window-zoom)
               )
        :config
        (custom-set-variables
         '(zoom-window-mode-line-color "DarkGreen"))  ;; Darkblue
        )
    #+END_SRC
*** all-the-icons (d)
    To integrate icons with =doom-modeline=, =switch-to-buffer=, =counsel-find-file=
    and many other functions; [[https://github.com/domtronn/all-the-icons.el/][all-the-icons]] is just the best package that you can
    find.

    *NOTE:* if it's the first time that you install the package, you must run
    =M-x all-the-icons-install-fonts=.

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package all-the-icons
        :if (display-graphic-p)
        :config (unless (find-font (font-spec :name "all-the-icons"))
                  (all-the-icons-install-fonts t)))
    #+END_SRC
*** smex (d)
     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package smex
         :ensure t
         :init (smex-initialize)
         :bind (
                ("M-x" . smex)
                )
         )
     #+END_SRC
*** hungry-delete (d)
     Deleting a whitespace character will delete all whitespace until the next
     non-whitespace character.

     [[https://github.com/nflath/hungry-delete][Nathaniel Flath]]

     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package hungry-delete
         :defer 0.7
         :delight
         :config (global-hungry-delete-mode))
     #+END_SRC

*** company (d)
     =company= provides auto-completion at point and displays a small pop-in
     containing the candidates.

     #+BEGIN_QUOTE
     Company is a text completion framework for Emacs. The name stands for "complete
     anything". It uses pluggable back-ends and front-ends to retrieve and display
     completion candidates.

     [[http://company-mode.github.io/][Dmitry Gutov]]
     #+END_QUOTE

     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package company
         :defer 0.5
         :delight
         :custom
         (company-begin-commands '(self-insert-command))
         (company-idle-delay 0.3)
         (company-minimum-prefix-length 2)
         (company-show-numbers t)
         (company-tooltip-align-annotations 't)
         (global-company-mode t)
         )
     #+END_SRC

     I use =company= with =company-box= that allows a company front-end with icons.

     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package company-box
         :after company
         :delight
         :hook (company-mode . company-box-mode))
     #+END_SRC
*** iedit (d)
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package iedit
        :ensure t
        :bind (("M-I" . iedit-mode))
         )
    #+END_SRC
*** highlight-indent-guides (d)
     Highlight the indentation is a feature that visually pleases me. Indeed, without
     having to count the spaces, I can see that the code is well indented.

     #+BEGIN_SRC emacs-lisp :tangle no
       (use-package highlight-indent-guides
         :defer 0.3
         :delight
         :hook
         (prog-mode . highlight-indent-guides-mode)
         :custom
         (highlight-indent-guides-method 'character)
         )
     #+END_SRC

*** ivy (d)
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package ivy-yasnippet
        :ensure t
        :after yasnippet
        )

       (use-package flyspell-correct-ivy
         :ensure t
         :after (flyspell ivy)
         :init
         (setq flyspell-correct-interface #'flyspell-correct-ivy)
         )
    #+END_SRC
** major - base
*** Makefile
    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-hook
       'makefile-mode-hook
       (lambda()
         (setq indent-tabs-mode t
               tab-width 4)
         )
       )
    #+END_SRC
*** Shell
    Define emacs shell program from environment.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (defvar emacs-shell-program (getenv "ESHELL"))
     (if (string-equal emacs-shell-program "")
         (setq emacs-shell-program "/bin/bash"))
   #+END_SRC

    The snippet below ensures that the execution right is automatically granted to
    save a shell script file that begins with a =#!= shebang:

    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun shell-hook-common()
        (setq-local show-trailing-whitespace nil)
        (hl-line-mode nil)
        (display-line-numbers-mode -1)
        (linum-mode -1)
        )

      (add-hook 'term-mode-hook 'shell-hook-common)
      (add-hook 'eshell-mode-hook 'shell-hook-common)
      (add-hook 'shell-mode-hook 'shell-hook-common)

      (add-to-list 'auto-mode-alist '("\\.shl\\'" . shell-script-mode))

      (add-hook 'comint-output-filter-functions
                'comint-watch-for-password-prompt)

      (add-hook 'after-save-hook
                'executable-make-buffer-file-executable-if-script-p)
    #+END_SRC
**** eshell
     #+BEGIN_SRC emacs-lisp :tangle yes
       (require 'eshell)
       (require 'em-smart)
       (setq eshell-where-to-jump 'begin)
       (setq eshell-review-quick-commands nil)
       (setq eshell-smart-space-goes-to-end t)
     #+END_SRC
*** multi-term (d)
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package
        :ensure t
        :config
        (setq multi-term-program (format "%s -l" emacs-shell-program))
        )
    #+END_SRC
*** TeX
    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-hook 'tex-mode-hook
                #'(lambda () (setq ispell-parser 'tex)))
    #+END_SRC
*** XML
    Associate wsdl and xsd extension with xml-mode (append at the end of the list).

    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq auto-mode-alist
            (append auto-mode-alist
                    '(("\\.wsdl\\'" . xml-mode)
                      ("\\.xsd\\'"  . xml-mode)))
            )
    #+END_SRC
** major - extra
*** adoc
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package adoc-mode
        :ensure t
        :mode "\\.adoc\\'"
        )
    #+END_SRC

*** CSS
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package css-mode
        :custom (css-indent-offset 2)
        :mode "\\.css\\'"
        )

      (use-package less-css-mode
        :mode "\\.less\\'")

      (use-package scss-mode
        :mode "\\.scss\\'")
    #+END_SRC
*** CSV
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package csv-mode :ensure t)
    #+END_SRC
*** cucumber
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package feature-mode
        :ensure t
        :mode "\\.feature$"
        )
    #+END_SRC
*** docbook (d)
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package docbook
        :ensure t
        )
    #+END_SRC
*** dockerfile
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package dockerfile-mode
        :delight "Dck"
        :mode "Dockerfile\\'")
    #+END_SRC
*** elisp
**** cask (d)
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package cask-mode
        :ensure t
        :defer t
        )
    #+END_SRC
*** groovy (d)
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package groovy-mode
        :ensure t
        :mode "Jenkinsfile\\'"
        )
    #+END_SRC
*** html
**** emmet
     Let's configure =emmet-mode=, to produce HTML from CSS-like selector:

     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package emmet-mode
         :ensure t
         :defer t
         :delight
         :hook (css-mode sgml-mode web-mode)
         ;; :config
         ;; (add-hook 'sgml-mode-hook #'emmet-mode) ;; on any markup modes
         ;; (add-hook 'css-mode-hook  #'emmet-mode) ;; css abbreviation
         )
       ;; (use-package ac-emmet
       ;;   :ensure t
       ;;   :config
       ;;   (add-hook 'sgml-mode-hook 'ac-emmet-html-setup)
       ;;   (add-hook 'css-mode-hook 'ac-emmet-css-setup)
       ;;   )
     #+END_SRC
*** INI
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package ini-mode
        :ensure t
        :mode ("\\.ini\\'"))
    #+END_SRC
*** LateX
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package tex
        :ensure auctex
        :defer t
        :config
        (setq TeX-auto-save t
              reftex-plug-into-AUCTeX t
              )
        )
    #+END_SRC
*** Markdown
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package markdown-mode
        :ensure t
        :delight "Md"
        :commands (markdown-mode gfm-mode)
        :mode (("README\\.md\\'" . gfm-mode)
               ("\\.m[k]d\\'" . markdown-mode)
               ("\\.markdown\\'" . markdown-mode))
        ;; :init (setq markdown-command "pandoc")
        :custom (markdown-command "pandoc")
        ;; :config
        ;; (setq markdown-fontify-code-blocks-natively t)
        )
    #+END_SRC
*** Puppet
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package puppet-mode
        :ensure t
        )
    #+END_SRC
*** terraform
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package terraform-mode
        :ensure t
        :config
        (custom-set-variables
         '(terraform-indent-level 2))
        )
    #+END_SRC
*** YAML
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package yaml-mode
        :ensure t
        )
    #+END_SRC
** org
   #+BEGIN_QUOTE
   Org mode is for keeping notes, maintaining TODO lists, planning projects, and
   authoring documents with a fast and effective plain-text system.

   [[http://orgmode.org/][Carsten Dominik]]
   #+END_QUOTE

   #+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default
   org-confirm-babel-evaluate nil
   ;; org-startup-indented t
   ;; org-startup-with-inline-images t
   )

  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     (python . t)
     (ruby . t)
     )
   )

  ;; adding special markers ‘!’ (for a timestamp) and ‘@’ (for a note) in parentheses after each keyword
  (setq org-todo-keywords
        '((sequence "TODO(t)" "|" "DONE(d!)")
          (sequence "BACKLOG(b!)" "READY(r!)" "WIP(w!)" "BLOCKED(B@)" "|" "DONE(d!)" "CANCELLED(c@)"))
        )
  ;; (setq org-log-done 'time)
  ;; (setq org-log-done 'note)

  ;; (setq org-agenda-custom-commands
  ;;    '(("h" "Daily habits"
  ;;       ((agenda ""))
  ;;       ((org-agenda-show-log t)
  ;;        (org-agenda-ndays 7)
  ;;        (org-agenda-log-mode-items '(state))
  ;;        (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp ":DAILY:"))))))

  (global-set-key (kbd "M-] o l") 'org-store-link)
  (global-set-key (kbd "M-] o a") 'org-agenda)
  (global-set-key (kbd "M-] o c") 'org-capture)
   #+END_SRC
*** truncate
    Non-nil means entering Org-mode will set `truncate-lines'.
    This is useful since some lines containing links can be very long and
    uninteresting.  Also tables look terrible when wrapped.
    #+BEGIN_SRC emacs-lisp :tangle no
      (setq org-startup-truncated nil)
    #+END_SRC
*** export
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq
       org-export-backends
       (quote
        (ascii beamer html icalendar latex man md odt org texinfo))
       )
    #+END_SRC
*** org-bullets
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package org-bullets
	:ensure t
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
	)
    #+END_SRC
*** org-superstar
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package org-superstar
	:ensure t
	:config
	(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
	)
    #+END_SRC
** utilities
*** git
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package magit
        :ensure t
        :bind (("M-] g s" . magit-status)
               ("M-] g f" . magit-file-dispatch))
        )
      (use-package git-timemachine
        :ensure t
        :bind (("M-] g t" . git-timemachine))
        )
    #+END_SRC
*** ag - The Silver Searcher (d)
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package ag
	:ensure t
	:bind (("M-s a a" . ag)
	       ("M-s a f" . ag-files)
	       ("M-s a r" . ag-regexp)
	       ("M-s a p" . ag-project)
	       ("M-s a F" . ag-project-files)
	       ("M-s a R" . ag-project-regexp))
	:config
	(setq ag-highlight-search t)
	(setq ag-reuse-window 't)
	)
    #+END_SRC
** Themes
*** railscasts-reloaded
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package railscasts-reloaded-theme
        :ensure t
        :init
        (load-theme 'railscasts-reloaded t)
        )
    #+END_SRC
*** zenburn

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package zenburn-theme
	:ensure t
	:config
	(load-theme 'zenburn t)
	)
    #+END_SRC

*** dracula

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package dracula-theme
	:config
	(load-theme 'dracula)
	:ensure t
	)
    #+END_SRC

*** doom & modeline

    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package doom-themes
	:config (load-theme 'doom-nord t))

      (use-package doom-modeline
	:defer 0.1
	:config (doom-modeline-mode))
    #+END_SRC

* documentation
** Help
*** Info
    | Key / Command    | Purpose |
    |------------------+---------|
    | C-h i / M-x info |         |
    | M-x info-apropos |         |

    | Info Key | Purpose                                   |
    |---------+-------------------------------------------|
    | [ and ] | Previous / next node                      |
    | l and r | Go back / forward in history              |
    | n and p | Previous / next sibling node              |
    | u       | Goes up one level to a parent node        |
    | SPC     | Scroll one screen at a time               |
    | TAB     | Cycles through cross-references and links |
    | RET     | Opens the active link                     |
    | m       | Prompts for a menu item name and opens it |
    | q       | Closes the info browser                   |

    look up the documentation for a command by typing C-h F
*** Apropos
    | Command               | Key   | Purpose                                                       |
    |-----------------------+-------+---------------------------------------------------------------|
    | apropos               |       | display all symbols that match a given pattern                |
    | apropos-command       | C-h a | shows all commands that match a given pattern                 |
    | apropos-documentation | C-h d | searches just the docstring with which you can supply symbols |
    | apropos-library       |       | lists all variables and functions defined in a library        |
    | apropos-user-option   |       | shows user options available through the Customize interface  |
    | apropos-value         |       | sarches all symbols with a particular value                   |
*** Describe
    | Command           | Key   | Purpose                                       |
    |-------------------+-------+-----------------------------------------------|
    | describe-mode     | C-h m | displays the documentation for the major mode |
    | describe-function | C-h f | describes a function (and command)            |
    | describe-variable | C-h v | describes a variable                          |
    | describe-key      | C-h k | describes what a key binding does             |
*** toolbar
    | Key   | Purpose                                  |
    |-------+------------------------------------------|
    | M-`   | Activate text-mode menubar (tmm-menubar) |
    | <f10> | Activate menu-bar-open                   |
** evaluating code
   | Key / Command       | Description                                     |
   |---------------------+-------------------------------------------------|
   | M-x eval-buffer     | execute everything in the current buffer        |
   | M-x eval-region     | execute selected region only                    |
   | M-x eval-last-sexp  | execute previous sexp only                      |
   | C-x C-e             | bound to eval-last-sexp                         |
   | M-x eval-defun      | valuate the outer-most form                     |
   | C-M-x               | bound to eval-defun                             |
   | C-u C-M-x           | evaluate with edebug activated                  |
   | M-x eval-expression | evaluate an expression                          |
   | M-:                 | bound to eval-expression                        |
   | C-u M-:             | evaluate an expression and insert in the buffer |
   | C-x M-:             | redo the previous command                       |

   Invoke multiple expressions:
   (progn (command1) (command2) (commandn))
*** repeat
    | Key / Command              | Description                     |
    |----------------------------+---------------------------------|
    | M-x repeat                 | repeat simple command           |
    | C-x z                      | bound to repeat                 |
    | M-x repeat-complex-command | repeat complex command          |
    | C-x M-:                    | bound to repeat-complex-command |
*** ielm : Interactive Emacs-Lisp Mode
    ielm support in auto complete
    #+BEGIN_SRC emacs-lisp :tangle no
      (defun ielm-auto-complete ()
        "Enables `auto-complete' support in \\[ielm]."
        (setq ac-sources '(ac-source-functions
                           ac-source-variables
                           ac-source-features
                           ac-source-symbols
                           ac-source-words-in-same-mode-buffers))
        (add-to-list 'ac-modes 'inferior-emacs-lisp-mode)
        (auto-complete-mode 1))
      (add-hook 'ielm-mode-hook 'ielm-auto-complete)
    #+END_SRC
** key bindings
*** commands
    - (define-key KEYMAP KEY DEF)
      Defines a key against a keyboard map. Use this if you want to change
      a keymap that isn’t the current buffer map.
    - (local-set-key KEY COMMAND)
      Binds a key to the local keymap used by the active buffer, unlike
       define-key which takes an explicit keymap to bind a key against.
    - (global-set-key KEY COMMAND)
      Binds a key to the global keymap, making it available in all buffers
      (with a caveat – see below.)
    - (global-unset-key KEY)
      Removes KEY from the global keymap
    - (local-unset-key KEY)
      Removes KEY from the active, local keymap.
*** remapping comands
    (define-key (current-global-map) [remap old-command] 'new-command)
*** keymap lookup order
    1. overriding-terminal-local-map for terminal-specific key binds.
    2. overriding-local-map for keys that should override all other local keymaps.
    3. Keymap char property at point for keymaps that are local to the character point is at.
    4. emulation-mode-map-alists for advanced multi-mode keymap management.
    5. minor-mode-overriding-map-alist for overriding the keymaps used by minor modes in major modes.
    6. minor-mode-map-alist is exactly like the overriding version above, but the preferred means of specifying the keymaps for minor modes.
    7. Keymap text property at point is like the one above for char properties but is for text properties only.
    8. current-local-map for keymaps defined in the buffers’ current local map.
    9. current-global-map is the last place Emacs will look for key binds and it is for the global ones.

    => minor mode keys come before local keys, that come before global keys.
*** extract complex command
    C-x ESC ESC

    =>

    (query-replace-regexp "foo" "bar" nil
   (if (and transient-mark-mode mark-active)
       (region-beginning))
   (if (and transient-mark-mode mark-active)
       (region-end)))

    or

    (switch-to-buffer "*scratch*")
*** example: global key bind
    => Creates a global key bind available to all buffers.

    (global-set-key (kbd "key-bind-here") 'interactive-command-here)

    as in

    (global-set-key (kbd "<f1>") 'shell)
*** example: add key to a keymap
    => Adds a key and its associated command to a local keymap. Useful for
       extending major modes with your own custom key binds.

    (define-key KEYMAP (kbd "key-bind-here") 'interactive-command-here)

    as in

    (define-key python-mode-map (kbd "C-c p") 'python-switch-to-python)
*** example: complex command key bind
    => Creates a global key bind that invokes multiple commands in a row. Use
       this to create compound keys or invoke commands that take parameters. Uses
       code from the Function Template.

    (defun name-of-interactive-command-here ()
      (interactive)
      ;;; Insert your compound commands below
    )
    (global-set-key (kbd "key-bind-here") 'name-of-interactive-command-here)

    as in

    (defun switch-to-scratch-and-insert-text ()
      (interactive)
      (save-excursion
      (set-buffer "*scratch*")
      (insert "Hello, World")))
    (global-set-key (kbd "C-c i") 'switch-to-scratch-and-insert-text)
*** example binding keys with a mode hook
    => Use this mode hook template to bind keys that won’t work with a standard
       define-key template or that require local binding for other reasons. The
       advantage of a mode hook is that it also gives you the opportunity to set
       mode-specific settings like indentation, etc.

    (defun my-hook-function ()
      ;; add your code here. it will be called every
      ;; time the major mode is run.
    )
    (add-hook 'my-mode-hook 'my-hook-function)

    as in

    (defun enable-my-elisp-settings ()
      (turn-on-eldoc-mode)
      (local-set-key (kbd "C-m") 'newline-and-indent))
    (add-hook 'emacs-lisp-mode-hook 'enable-my-elisp-settings)
*** example: remapping a function
    => This template will remap all keys that point to a specific function; say
       you want to rebind kill-line which is bound to C-k but you want your code to
       only override the key binds that kill-line is actually bound to. Use this
       template to replace existing commands with those of your own, without
       worrying about explicitly rebinding each key.

    (define-key keymap [remap original-function] 'my-own-function)

    as in

    (defun exchange-point-and-mark-no-activate ()
      "Identical to \\[exchange-point-and-mark] but will not activate the region."
      (interactive)
      (exchange-point-and-mark)
      (deactivate-mark nil))
    (define-key global-map [remap exchange-point-and-mark] 'exchange-point-and-mark-no-activate)
*** example: custom prefixes
    => Creating a prefix is easy nowadays as you don’t have to explicitly create
       your own prefix keymaps, provided you use local-set-key or global-set-key.
       Use custom prefixes to group or categorize your commands.

    (global-set-key (kbd "subkey_1 ... endkey_1") 'my-command-1)
    (global-set-key (kbd "subkey_1 ... endkey_2") 'my-command-2)

    as in

    (defun mp-insert-date ()
      (interactive)
      (insert (format-time-string "%x")))
    (defun mp-insert-time ()
      (interactive)
      (insert (format-time-string "%X")))
    (global-set-key (kbd "C-c i d") 'mp-insert-date)
    (global-set-key (kbd "C-c i t") 'mp-insert-time)
** function & command
*** command template
    (defun my-function-name-here ()
      (interactive)
      ;;; Place your code below this line, but inside the bracket.
    )
*** command template : example : hello world
    (defun message-hello-world ()
      (interactive)
      (message "Hello, World")
    )
** file-local variables
   #+BEGIN_SRC
   # / - * - mode: mode-name-here; my-variable: value - * -

   or footers:

   # / Local Variables :
   # / mode : mode-name-here
   # / my - variable : value
   # / End :
   #+END_SRC
** movement
** editing
*** transpose
    | Key                      | Purpose                 |
    |--------------------------+-------------------------|
    | C-t                      | Transpose characters    |
    | M-t                      | Transpose words         |
    | C-M-t                    | Transpose s-expressions |
    | C-x C-t                  | Transpose lines         |
    | M-x transpose-paragraphs | Transpose paragraphs    |
    | M-x transpose-sentences  | Transpose sentences     |
*** fill
    | Key                | Purpose                           |
    |--------------------+-----------------------------------|
    | M-q                | Refills the paragraph point is in |
    | C-x f              | Sets the fill column width        |
    | C-x .              | Sets the fill prefix              |
    | M-x auto-fill-mode | Toggles auto-filling              |
*** comment
    | Key             | Purpose                                                   |
    |-----------------+-----------------------------------------------------------|
    | M-;             | Comment or uncomment DWIM                                 |
    | C-x C-;         | Comment or uncomment line                                 |
    | M-x comment-box | Comments the region but as a box                          |
    | M-j, C-M-j      | Inserts new line and continues with comment on a new line |

    | Variable        | Purpose                                                                  |
    |-----------------+--------------------------------------------------------------------------|
    | comment-style   | Style of comment to use                                                  |
    | comment-styles  | Association list of available comment styles                             |
    | comment-start   | Character(s) to mark start of comment                                    |
    | comment-end     | Character(s) to mark end of comment                                      |
    | comment-padding | Padding used (usually a space) between comment character(s) and the text |
*** replace
    | key                | Purpose                         |
    |--------------------+---------------------------------|
    | C-M-%              | Query regexp search and replace |
    | M-%                | Query search and replace        |
    | M-x replace-string | Search and replace              |
    | M-x replace-regexp | Regexp search and replace       |

    | Isearch Key | Purpose                         |
    |-------------+---------------------------------|
    | C-M-%       | Query regexp search and replace |
    | M-%         | Query search and replace        |

    | Query Key | Purpose                            |
    |-----------+------------------------------------|
    | SPC, y    | Replaces one match, then continues |
    | .         | Replaces one match, then exits     |
    | ,         | Replace, but stay at current match |
    | RET, q    | Exits without replacing match      |
    | !         | Replaces all matches in buffer     |
    | ^         | Moves point back to previous match |
    | u, U      | Undo last / all replacement(s)     |

    Regular expressions

    | Constructs            | Description                                                               |
    |-----------------------+---------------------------------------------------------------------------|
    | \                     | Alternative                                                               |
    | \(, \)                | Capturing group                                                           |
    | \{, \}                | Repetition                                                                |
    |-----------------------+---------------------------------------------------------------------------|
    | \<, \>                | Matches beginning and end of word                                         |
    | \_<, \_>              | Matches beginning and end of symbol                                       |
    | \scode                | Matches any character whose syntax table code is code                     |
    | \Scode                | Matches any character whose syntax table code is not code                 |
    |-----------------------+---------------------------------------------------------------------------|
    | \1 to \9              | Inserts text from group \N                                                |
    | \#1 to \#9            | Inserts text from group \N but cast as an integer                         |
    | \?                    | Prompts for text input from user                                          |
    | \#                    | Inserts a number incremented from 0                                       |
    | \&                    | Inserts whole match string                                                |
    |-----------------------+---------------------------------------------------------------------------|
    | \,(form ...)          | Invoking Elisp                                                            |
    | \,(upcase \N)         | Uppercases capturing group \N                                             |
    | \,(format "%.2f" \#N) | Casts \#N to a number and formats it as a decimal with two decimal points |
*** case
    | Commands                   | Purpose                   |
    |----------------------------+---------------------------|
    | C-x C-u                    | Uppercases the region     |
    | C-x C-l                    | Lowercases the region     |
    | M-x upcase-initials-region | Capitalizes the region    |
    |----------------------------+---------------------------|
    | M-c                        | Capitalizes the next word |
    | M-u                        | Uppercases the next word  |
    | M-l                        | Lowercases the next word  |
*** counting
    | Commands                    | Purpose                                                        |
    |-----------------------------+----------------------------------------------------------------|
    | M-x count-lines-region      | Counts number of lines in the region (before Emacs 24.1)       |
    | M-x count-matches           | Counts number of patterns that match in a region               |
    | M-x count-words             | Counts words, lines and chars in the buffer (after Emacs 24.1) |
    | M-x count-words-region, M-= | Counts words, lines and chars in the region (after Emacs 24.1) |
*** deleting duplicates
    M-x delete-duplicate-lines

    | Argument    | Description                          |
    |-------------+--------------------------------------|
    | Without     | Deletes first duplicate line         |
    | C-u         | Start from botton                    |
    | C-u C-u     | Deletes only adjacent duplicates     |
    | C-u C-u C-u | Does not delete adjacent blank lines |
*** flushing and keeping
    | Command         | Description                                                                  |
    |-----------------+------------------------------------------------------------------------------|
    | M-x flush-lines | Flushes (deletes) all lines in a region that match a pattern                 |
    | M-x keep-lines  | Keeps all lines in a region that match a pattern and removes all non-matches |
*** joining and splitting lines
    | Key     | Description                                        |
    |---------+----------------------------------------------------|
    | C-o     | Inserts a blank line after point                   |
    | C-x C-o | Deletes all blank lines after point                |
    | C-M-o   | Splits a line after point, keeping the indentation |
    | M-^     | Joins the line the point is on with the one above  |
*** whitespace
    | Command                        | Description                                                       |
    |--------------------------------+-------------------------------------------------------------------|
    | M-x delete-trailing-whitespace | Deletes all trailing whitespace                                   |
    | M-SPC                          | Deletes all but 1 space or tab to the left and right of the point |
    | M-x cycle-spacing              | As above but cycles through all but one, all, and undo            |
    | M-\                            | Deletes whitespace around point                                   |
**** whitespace minor mode
     | Command                       | Description                                           |
     |-------------------------------+-------------------------------------------------------|
     | M-x whitespace-mode           | Minor mode that highlights all whitespace characters  |
     | M-x whitespace-newline-mode   | Minor mode that displays newline characters with a $  |
     | M-x whitespace-toggle-options | Displays a toggle menu of all whitespace-mode options |

     Whitespace mode tracks the following:
     - trailing spaces,
     - tabs,
     - spaces,
     - lines that are longer than whitespace-line-column (typically 80 characters),
     - newline characters,
     - empty lines,
     - indentation (both tabs and spaces),
     - spaces after tabs and spaces before tabs.

***** reporting and cleanup
      | Command                   | Description                 |
      |---------------------------+-----------------------------|
      | whitespace-report         | Shows whitespace issues     |
      | whitespace-report-region  | As above but for the region |
      | whitespace-cleanup        | Attempts automatic cleanup  |
      | whitespace-cleanup-region | As above but for the region |
*** macro
    | Key             | Description                                     |
    |-----------------+-------------------------------------------------|
    | F3              | Starts macro recording or inserts counter value |
    | F4              | Stops macro recording or plays last macro       |
    | C-x ( and C-x ) | arts and stops macro recording                  |
    | C-x e           | Plays last macro                                |
    |-----------------+-------------------------------------------------|
    | C-u F3          | Starts recording but appends to the last macro  |
    | C-u F4          | Plays the second macro in the ring              |
    | numeric F3      | Starts recording but sets counter to numeric    |
    | numeric F4      | Plays last macro numeric times                  |
    |-----------------+-------------------------------------------------|
    | C-x C-k         | kmacro prefix                                   |
    |-----------------+-------------------------------------------------|

**** Counters
    | Key             | Description                              |
    |-----------------+------------------------------------------|
    | C-x C-k C-a     | Adds to counter                          |
    | C-x C-k TAB, F3 | Inserts counter (with C-u, no increment) |
    | C-x C-k C-c     | Sets counter                             |
    | C-x C-k C-f     | Sets format counter                      |
    | C-x C-k q       | Queries for user input while recording   |

**** Query
    | Query Key | Description                 |
    |-----------+-----------------------------|
    | Y         | Continues as normal         |
    | N         | Skips the rest of the macro |
    | RET       | Stops the macro entirely    |
    | C-l       | Recenters the screen        |
    | C-r       | Enters recursive edit       |
    | C-M-c     | Exits recursive edit        |

**** Saving and Recalling
     | Key                  | Description                   |
     |----------------------+-------------------------------|
     | C-x C-k C-n          | Cycles macro ring to next     |
     | C-x C-k C-p          | Cycles macro ring to previous |
     | C-x C-k n            | Names the last macro          |
     | C-x C-k b            | Binds the last macro to a key |
     | C-x C-k e            | Edits last macro              |
     | C-x C-k l            | Edits the last 300 keystrokes |
     | M-x insert-kbd-macro | Inserts macro as elisp        |
     |                      |                               |
*** Abbrev
    | Key       | Description                       |
    |-----------+-----------------------------------|
    | C-x a l   | Adds mode-specific abbrev         |
    | C-x a g   | Adds global abbrev                |
    | C-x a i l | Adds mode-specific inverse abbrev |
    | C-x a i g | Adds global inverse abbrev        |
*** DAbbrev
    | Key   | Description                   |
    |-------+-------------------------------|
    | M-/   | Expands word at the point     |
    | C-M-/ | Expand, then show completions |
*** Hippie Expand
    (global-set-key [remap dabbrev-expand] 'hippie-expand)

    - Read the commentary in the source (M-x find-library, then enter hippie-exp and read the documentation).
    - Use Apropos. Look at the names of the try functions and search for likely functions using M-x apropos-function.
*** indenting
    | Key                | Description                                         |
    |--------------------+-----------------------------------------------------|
    | TAB                | Indents line using major mode’s indentation command |
    | M-i                | Inserts spaces or tabs to next tab stop             |
    | M-x edit-tab-stops | Edits tab stops                                     |

    Configuration:
    - indent-tabs-mode: use of tab characters or use of space
    - tab-always-indent
    - tab-width: controls how many characters of spacing each tab uses
**** region
     | Key     | Description                                      |
     |---------+--------------------------------------------------|
     | TAB     | Indents a line or region as per the major mode   |
     | C-M-\   | Indents using major mode’s region indent command |
     | C-x TAB | Rigidly indents                                  |
*** sorting
    | Command                 | Description                                      | Modifier                |
    |-------------------------+--------------------------------------------------+-------------------------|
    | M-x sort-lines          | Sorts alphabetically                             | C-u => reverse          |
    | M-x sort-fields         | Sorts field(s) lexicographically                 | numeric => field column |
    | M-x sort-numeric-fields | Sorts field(s) numerically                       | numeric => field column |
    | M-x sort-columns        | Sorts column(s) alphabetically                   |                         |
    | M-x sort-paragraphs     | Sorts paragraphs alphabetically                  |                         |
    | M-x sort-regexp-fields  | Sorts by regexp-defined fields lexicographically |                         |
    | M-x sort-pages          | Sort pages alphabetically                        |                         |

    variable:
    - sort-fold-case : set it to t to force Emacs to ignore case differences when sorting
*** aligning
    | Command              | Description                             |
    |----------------------+-----------------------------------------|
    | M-x align            | Aligns region based on align rules      |
    | M-x align-current    | Aligns section based on align rules     |
    | M-x align-regexp     | Aligns region based on regexp (simple)  |
    | C-u M-x align-regexp | Aligns region based on regexp (Complex) |
*** zapping
    | Command | Description                                                      | Modifier |
    |---------+------------------------------------------------------------------+----------|
    | M-z     | zap-to-char, kills up to (and including) the character you typed | numeric  |
*** spelling
    | Key / Command          | Description                                                     |
    |------------------------+-----------------------------------------------------------------|
    | M-$                    | Spell checks word at the point                                  |
    | M-x flyspell-mode      | Minor mode that highlights spelling errors                      |
    | M-x flyspell-prog-mode | As above, but only highlights strings and doc strings in code   |
    | M-x ispell-buffer      | Runs spell check on buffer                                      |
    | M-x ispell-region      | Runs spell check on region                                      |
    |------------------------+-----------------------------------------------------------------|
    | C-M-i / C-.            | Cycle through likely matches, and correct the word at the point |

    flyspell-mode: for text
    flyspell-prog-mode: for prog mode, as it limits spell checking to just your comments, strings and doc strings
*** quoted insert
    | Key / Command | Description                  |
    |---------------+------------------------------|
    | C-q           | quoted insert                |
    | C-q C-j       | insert LINE FEED symbol      |
    | C-q ESC       | insert ASCII control code ^[ |
*** lossage
    | Key                   | Description                    |
    |-----------------------+--------------------------------|
    | C-h l                 | view lossage                   |
    | M-x open-dribble-file | save every keystroke to a file |
** Practicals
*** version control (vc)
    | Keys / Commands             | Description                      |
    |-----------------------------+----------------------------------|
    | C-x v                       | Prefix key for vc-               |
    | M-x vc-dir, C-x v d         | Shows VC status for current dir  |
    | M-x vc-diff, C-x v =        | Displays diffs between file revs |
    | M-x vc-annotate, C-x v g    | Blames/annotates current file    |
    | M-x vc-next-action, C-x v v | Does next logical action         |
    | M-x vc-print-log, C-x v l   | Prints commit log                |
*** project management
    | Keys    | Description                     |
    |---------+---------------------------------|
    | C-x p p | Switch to other known projects  |
    | C-x p b | Switch to buffer                |
    | C-x p f | Find file in project            |
    | C-x p k | Kill project buffers            |
    | C-x p g | Search by regexp                |
    | C-x p r | Query regexp search and replace |
    | C-x p c | Compile project                 |
    | C-x p v | Open VC Dialog                  |
    | C-x p s | Open a Shell                    |
    | C-x p d | Open a Dired buffer             |
*** xref
    | Keys  | Description                        |
    |-------+------------------------------------|
    | M-.   | Find definitions at point          |
    | M-,   | Pop marker4 and return             |
    | M-?   | Find references matching a pattern |
    | C-M-. | Find symbols matching a pattern    |

    | Xref Buffer Keys | Description                       |
    |------------------+-----------------------------------|
    | RET              | Jump to definition                |
    | TAB              | Jump to definition, and hide xref |
    | C-o              | Show definition                   |
    | . and ,          | Navigate up or down               |
    | r                | Query search and replace regexp   |
*** log files
    | Keys            | Description                         |
    |-----------------+-------------------------------------|
    | C-x C-f         | Finds a file                        |
    | C-x C-r         | Finds a file in read only mode      |
    | C-x C-q         | Toggles read only mode              |
    |-----------------+-------------------------------------|
    | M-x flush-lines | Flushes lines matching a pattern    |
    | M-x keep-lines  | Keeps only lines matching a pattern |
    | M-s o           | List lines matching a pattern       |
*** highlighters
    start with highlight-

    | Keys    | Description                          |
    |---------+--------------------------------------|
    | M-s h p | Highlights a phrase                  |
    | M-s h r | Highlights a regular expression      |
    | M-s h . | Highlights symbol at the point       |
    | M-s h u | Removes highlighting under the point |
*** auto-revert
    | Keys                      | Description                       |
    |---------------------------+-----------------------------------|
    | M-x auto-revert-mode      | Reverts buffer when file changes  |
    | M-x auto-revert-tail-mode | Appends changes when file changes |
*** image
    | Image Keys | Description            |
    |------------+------------------------|
    | q          | Quit                   |
    | s          | Resize image to window |
    | f          | Show in full size      |
**** thumbnail image browser
     | Thumbnail Keys | Description                            |
     |----------------+----------------------------------------|
     | C-f, C-b       | Move to the next or previous thumbnail |
     | C-p, C-n       | Move up or down a row of thumbnails    |
     | d, m, u        | Delete, mark, or unmark (like Dired)   |
     | t t, t u       | Tag or untag image                     |
     | RET            | Open image                             |
     | l, r           | Rotate thumbnail left or right         |
*** doc-view
    | Keys            | Description                          |
    |-----------------+--------------------------------------|
    | n, p            | Page up / page down                  |
    | <prior>, <next> | Page up / page down                  |
    | SPC             | Scroll down                          |
    | S-SPC           | Scroll up                            |
    | M-<, M->        | Jump to first / last page            |
    | +, -, 0         | Enlarge, shrink or reset             |
    | W, H, P, F      | Fit to width, height, page or window |
    | q               | Quit                                 |

    Increase DPI with:
    (setq doc-view-resolution 400)

    Slide show with:
    M-x doc-view-presentation
*** TRAMP
    tramp connection syntax:
    /protocol:[user@]hostname[#port]:
    /-:[user@]hostname[#port]:  (using tramp-default-method)

    - set tramp-default-method to ssh

    tramp user switching syntax:
    /sudo:root@localhost:/etc/fstab

    tramp mutli-hopping syntax:
    /ssh:homer@powerplant|sudo:powerplant:/root/salary.txt
*** browse-url & EWW
    | Keys           | Description             |
    |----------------+-------------------------|
    | M-x eww        | use EWW                 |
    | C-u M-x eww    | create a new EWW buffer |
    |----------------+-------------------------|
    | M-x browse-url | web browser             |

    | Variable                   | Description     |
    |----------------------------+-----------------|
    | eww-search-prefix          | default URL     |
    |----------------------------+-----------------|
    | browse-url-default-browser | default browser |

    | EWW Keys   | Description                             |
    |------------+-----------------------------------------|
    | TAB, S-TAB | Cycle to next/prev hyperlink            |
    | q          | Quit EWW                                |
    | &          | Open page in with M-x browse-url        |
    | B          | Show bookmarks                          |
    | b          | Add bookmark                            |
    | H          | Show browser history                    |
    | l, r       | Browse backward / forward in history    |
    | p, n, u, t | Semantic web navigation aids            |
    | R          | Enable Reader mode                      |
    | RET        | Browse link                             |
    | C-u RET    | Open link in external browser           |
    | M-s M-w    | Searches for point in EWW               |
    | M-RET      | Open link in new buffer (Emacs 26)      |
    | s          | Switch to another EWW buffer (Emacs 26) |
    | w          | Copy link at point (Emacs 26)           |
*** dired
**** to dired mode
     | Key / Command | Description                                                |
     |---------------+------------------------------------------------------------|
     | M-x dired     | prompt for the dired location to open                      |
     | C-x d         | prompt for the dired location to open                      |
     | C-x 4 d       | prompt for the dired location to open, in the other window |
     | C-d           | from IDO mode, to dired                                    |
**** customize
     | Variable               | Description                      |
     |------------------------+----------------------------------|
     | dired-listing-switches | customize ls options for listing |
**** navigation
     | Key            | Description                       |
     |----------------+-----------------------------------|
     | RET            | Visits the file or directory      |
     | ^              | Goes up one directory             |
     | q              | Quits dired                       |
     | n, p, C-n, C-p | Moves the point up/down a listing |
**** mark
     | Key    | Description              |
     |--------+--------------------------|
     | m      | Marks active             |
     | u      | Unmarks active           |
     | U      | Unmarks everything       |
     | d      | Flags for deletion       |
     |--------+--------------------------|
     | * m    | Marks region             |
     | * u    | Unmarks region           |
     | * %    | Marks files by regexp    |
     | * .    | Marks files by extension |
     | t, * t | Toggles marking          |
     | * c    | Changes mark             |
**** marked operations
     | (marked) Key | Description                                   |
     |--------------+-----------------------------------------------|
     | C            | Copy files                                    |
     | R            | Rename or move files                          |
     | O            | Change owner                                  |
     | G            | Change group                                  |
     | M            | Change permissions                            |
     | D            | Deletes marked (shown as *)                   |
     | x            | Deletes flagged (shown as D)                  |
     | F            | Visit files (requires dired-x)                |
     | c            | Compress marked to a file (Emacs 25 or later) |
     |--------------+-----------------------------------------------|
     | M-s a C-s    | Begin isearch                                 |
     | Q            | Xref Query replace regexp                     |
     | A            | Xref Search by regexp                         |
     | !            | Synchronous shell command                     |
     | &            | Asynchronous shell command                    |

     Configure dired-guess-shell-alist-default,
     for defining default action.
**** shell commad
     * : 1 execution with all marked as n arguments
     ? : n execution with all marked as 1 argument
**** operations
     | Key  | Description                  |
     |------+------------------------------|
     | g    | Refreshes dired buffer       |
     | +    | Creates a sub-directory      |
     | s    | Toggles sorting by name/date |
     | <, > | Jump to prev/next directory  |
     | j    | Jumps to file                |
**** across directories
     | Key                  | Description                                                    |
     |----------------------+----------------------------------------------------------------|
     | i                    | insert dired output for the directory in the same dired buffer |
     | $                    | toggle expand/collapse dired listing                           |
     |----------------------+----------------------------------------------------------------|
     | find-dired           | Calls find with a pattern                                      |
     | find-name-dired      | Calls find with -name                                          |
     | find-grep-dired      | Calls find and grep                                            |
     | find-lisp-find-dired | Uses Emacs and regexp to find files                            |
*** shell commands
    | Keys    | Description                           |
    |---------+---------------------------------------+
    | M-!     | Calls shell command and prints output |
    | C-u M-! | As above, but inserts into buffer     |
    | M-&     | Like M-! but asynchronous             |
    | C-u M-& | Like C-u M-! but asynchronous         |
    | M-\vert     | Pipes region to shell command         |
    | C-u M-\vert | Likes M-\vert but replaces region         |
*** compiling
    | Commands         | Description                           |
    |------------------+---------------------------------------|
    | M-x compile      | Runs a command, and tracks errors     |
    | M-x recompile    | Re-runs last command                  |
    | M-g M-n, M-g M-p | Jumps to next/previous error (global) |
    | g                | Re-runs last command                  |
    | C-x p c          | Compile in the current project        |
*** shell in emacs
**** M-x shell : Shell mode
     | Keys             | Description                       |
     |------------------+-----------------------------------|
     | M-p, M-n         | Cycles through command history    |
     | C-<up>, C-<down> | Cycles through command history    |
     | M-r              | ISearches history backward        |
     | C-c C-p, C-c C-n | Jumps to previous / next prompt   |
     | C-c C-s          | Saves command output to file      |
     | C-c C-o          | Kills command output to kill ring |
     | C-c C-l          | Lists command history             |
     | C-d              | Deletes forward char or sends ^D  |
     | C-c C-z          | Sends stop sub job                |
     | TAB              | Completes at the point            |
**** M-x ansi-term : Terminal emulator
     | Keys    | Description                                                |
     |---------+------------------------------------------------------------|
     | C-c     | Escape character                                           |
     |---------+------------------------------------------------------------|
     | C-c C-j | Switches to line mode (like emacs buffer)                  |
     | C-c C-k | Switches to character mode (like normal terminal emulator) |
     |---------+------------------------------------------------------------|
     | C-c C-c | Send C-c to the sub-process                                |
**** M-x eshell : Emacs shell
     Eshell is an elisp shell,
     as every command you type into Eshell,
     - is first filtered through Eshell’s own emulation layer,
     - then through Emacs’s own interactive commands,
     - and then finally through programs in your $PATH or in the current directory.

     Configure evaluation priority with:
     eshell-prefer-lisp-functions

     You can type :
     - dired . to open a M-x dired session in the current directory,
     - find-file todo.org to open todo.org in your currently-running Emacs.

    | Key               | Description                                                                            |
    |-------------------+----------------------------------------------------------------------------------------|
    | M-r / M-s         | Search backwards or forwards for a command by regexp                                   |
    | M-p / M-n         | Goes backwards or forwards in the command history list                                 |
    | C-p / C-n         | Jump to the previous or next command position in Eshell                                |
    | C-c M-r / C-c M-s | Jumps to the previous or next command that shares the command currently used as input. |
    |-------------------+----------------------------------------------------------------------------------------|
    | C-c M-b           | Inserts the printed buffer name at point                                               |
    | C-c M-i           | Inserts the printed process name at point                                              |
    | C-c M-v           | Inserts an environment variable name at point                                          |
    | C-c M-d           | Toggles between direct input and delayed input (send on RET).                          |

    | History Keys | Description                                                                                            |
    |--------------+--------------------------------------------------------------------------------------------------------|
    | !!           | Repeats the last command                                                                               |
    | !ls          | Repeats the last command beginning with ls                                                             |
    | !?ls         | Repeats the last command containing ls                                                                 |
    | !ls:n        | Extract the nth argument from the last command beginning with ls                                       |
    | !ls<tab>     | Using pcomplete, show completion results matches ls                                                    |
    | ^old^new     | Quick substitution. Using the last command, replaceold with new and run it again. Appears to be buggy. |
    | $_           | Returns the last parameter in the last executed command.                                               |
***** startup scripts
      stored in the variables:
      - eshell-login-script
      - eshell-rc-script

      by default:
      - <eshell dir>/login
      - <eshell dir>/profile
***** useful elisp commands
      - listify ARGS
        Parses an argument string into elisp list notation and
        prints it to the screen. It’s clever enough to handle both
        MS-DOS/Windows and POSIX-style argument syntax.
      - addpath PATH
        Adds the argument, which must be a path, to the $PATH
        environment variable. If no argument is specified the existing paths are
        pretty-printed to the screen.
      - unset ENV-VAR
        Unsets an existing environment variable
      - find-file FILE
        Finds the file FILE and opens it in Emacs. This function is TRAMP aware
        and will therefore work remotely.
      - dired DIRECTORY
        Opens a dired buffer in DIRECTORY.
      - calc-eval EXPR
        Runs EXPR through the Emacs calculator.
      - upcase STR/downcase STR
        Converts STR to upper- or lowercase.
      - vc-dir DIRECTORY
        Reports the status of a version controlled directory (equivalent to the
        status command in most VCS)
      - ediff-files FILE1 FILE2
        Diffs FILE1 and FILE2 using ediff, Emacs’ diff engine.
***** prompt
      modify :
      - eshell-prompt-function
      - eshell-prompt-regexp
***** argument predicates
      get help :
      - eshell-display-predicate-help
      - eshell-display-modifier-help
** Blogs
*** Planet Emacs aggregator:
    https://planet.emacsen.org/
*** Mastering emacs
    https://www.masteringemacs.org/
*** Sacha Chua
    https://sachachua.com/blog/
*** Irreal’s Emacs blog
    https://irreal.org/blog/
*** Artur Malabarba
    https://endlessparentheses.com/
*** Bozhidar Batzov
    https://batsov.com/
*** John Kitchin
    https://kitchingroup.cheme.cmu.edu/blog/
** Communities
*** Reddit
   Reddit There is a lively community of Emacs users on the
   subreddit /r/emacs. Since I wrote the book in 2015,
   the community has grown tremendously.
   You can also find specialized subreddits for particular
   areas of Emacs. /r/orgmode is also worth visiting.
*** StacjExchange
   StackExchange Emacs now has its own site on StackExchange:
   https://emacs.stackexchange.com/
* ToDo
** DONE toggle-truncate-lines in org / txt ?
   - State "DONE"       from              [2022-03-22 mar. 13:19]
   https://emacs.stackexchange.com/questions/5607/how-to-fill-wrap-an-org-mode-heading
** isearch: word vs symbol
** imenu
   M-i => imenu
** helm
** ido / fido
** grep vs. ack
** tab-bar mode vs tab-line mode
** [expansion] Abbrev / DAbbrev / hippie-expand
** [expansion] skeletons / Tempo
** [expansion] Autoinsert
** electric indent mode
** Magit
   https://www.magit.vc
** Multiple Cursors
   https://github.com/magnars/multiple-cursors.el
** LSP mode / EGlot
   https://github.com/emacs-lsp/lsp-mode
   https://github.com/joaotavora/eglot
** Helm
   https://emacs-helm.github.io/helm/
** Flycheck
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode)
       )
   #+END_SRC

   flycheck keybinding: C-c !

   | Key       | Description                          |
   |-----------+--------------------------------------|
   | C-c ! ?   | Describe a Flycheck Checker          |
   | C-c ! C-c | Compile using checker                |
   | C-c ! C-w | Copy error point is on to kill ring  |
   | C-c ! C   | Clear all highlights from buffer     |
   | C-c ! V   | Report Flycheck version              |
   | C-c ! c   | Start syntax checking current buffer |
   | C-c ! e   | Change Flycheck executable           |
   | C-c ! i   | Open Flycheck info manual            |
   | C-c ! l   | List all Flycheck errors             |
   | C-c ! n   | Jump to next error                   |
   | C-c ! p   | Jump to previous error               |
   | C-c ! s   | Change Flycheck checker              |
   | C-c ! v   | Verifies the Flycheck checker works  |
   | C-c ! x   | Disable Flycheck checker in buffer   |
*** checker
**** xml
     #+BEGIN_SRC emacs-lisp :tangle no
       (flycheck-define-checker xml-xmllint
         "A XML syntax checker and validator using the xmllint utility.

       The xmllint is part of libxml2, see URL
       `http://www.xmlsoft.org/'."
         :command ("xmllint" "--noout" source)
         :error-patterns
         ((error line-start (file-name) ":" line ": " (message) line-end))
         :modes (xml-mode nxml-mode)
         )
     #+END_SRC
*** references
    URL: https://www.flycheck.org/en/latest/
** Hydra
   https://github.com/abo-abo/hydra
** dumb-jump
   https://github.com/jacktasia/dumb-jump
** mark the next s-exp
** project management
** xref
** format-time-string vs iso8601
** multi-term
   https://www.emacswiki.org/emacs/MultiTerm
