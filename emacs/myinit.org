#+STARTUP: content

* standard
** bindings
   #+BEGIN_SRC emacs-lisp
     ;; repeat (previously C-x z)
     (global-set-key (kbd "<f8>") 'repeat)
     (global-set-key (kbd "M-<f8>") 'repeat-complex-command)

     ;; revert
     (global-set-key (kbd "<f5>") 'revert-buffer)

     ;; buffers
     ;;  (defalias 'list-buffers 'ibuffer)
     (global-set-key (kbd "C-x B") 'ibuffer)
     ;;  (global-set-key (kbd "C-x B") 'ibuffer-other-window)

     ;; kill-word
     (global-set-key (kbd "M-<deletechar>") 'kill-word)

     ;; myMenu - modes
     (global-set-key (kbd "M-_ m f") 'auto-fill-mode)
     (global-set-key (kbd "M-_ m l") 'display-line-numbers-mode)
     (global-set-key (kbd "M-_ m s") 'auto-save-mode)
     (global-set-key (kbd "M-_ m w") 'whitespace-mode)
     ;; myMenu - comments
     (global-set-key (kbd "M-_ #") 'comment-region)
     (global-set-key (kbd "M-_ @") 'uncomment-region)
     ;; myMenu - align
     (global-set-key (kbd "M-_ \\") 'align-regexp)
     ;;  (global-set-key (kbd "C-x \\") 'align-regexp)
     ;; myMenu - join
     (global-set-key (kbd "M-_ <deletechar>")
		     (lambda ()
		       (interactive)
		       (join-line -1)))
     ;; myMenu - alias
     (define-key key-translation-map (kbd "M-]") (kbd "M-_"))

     ;; Search
     (global-set-key (kbd "M-s O") 'multi-occur)
     (global-set-key (kbd "M-s d") 'find-dired)
     (global-set-key (kbd "M-s g") 'rgrep)
     (global-set-key (kbd "M-s r") 'query-replace-regexp)
   #+END_SRC
* utils
** editing
   #+BEGIN_SRC emacs-lisp
     (defun open-line-below ()
       (interactive)
       (end-of-line)
       (newline)
       (indent-for-tab-command))

     (defun open-line-above ()
       (interactive)
       (beginning-of-line)
       (newline)
       (forward-line -1)
       (indent-for-tab-command))

     ;; (global-set-key (kbd "<C-return>") 'open-line-below)
     ;; (global-set-key (kbd "<C-S-return>") 'open-line-above)
   #+END_SRC
** debugging
   #+BEGIN_SRC emacs-lisp
     ;;; Usage :
     ;;; (derived-mode-parents 'dog)
     (defun derived-mode-parents (mode)
       (and mode (cons mode (derived-mode-parents
			     (get mode 'derived-mode-parent)))))
     ;; Example :
     ;; (derived-mode-parents 'html-mode)
     ;; (derived-mode-parents 'ruby-mode)
     ;; (derived-mode-parents 'python-mode)
     ;; (derived-mode-parents 'lisp-mode)
   #+END_SRC
* modes
** recentf (minor)
   #+BEGIN_SRC emacs-lisp
     (use-package recentf
       :config
       (setq recentf-save-file (expand-file-name "recentf" savefile-dir)
	     recentf-max-menu-items 50
	     recentf-max-saved-items 100
	     ;; disable recentf-cleanup on Emacs start, because it can cause
	     ;; problems with remote files
	     recentf-auto-cleanup 'never)
       (global-set-key (kbd "M-_ e r") 'recentf-open-files)
       (global-set-key (kbd "<f9>") 'recentf-open-files)
       (recentf-mode 1))
   #+END_SRC
** shell
   #+BEGIN_SRC emacs-lisp
     (add-hook
      'term-mode-hook
      (lambda()
	    (setq-local show-trailing-whitespace nil)
	    (hl-line-mode nil)
	    (display-line-numbers-mode -1)
	    (linum-mode -1)
	    ))

     (add-hook
      'eshell-mode-hook
      (lambda()
	    (setq-local show-trailing-whitespace nil)
	    (hl-line-mode nil)
	    (display-line-numbers-mode -1)
	    (linum-mode -1)
	    ))
   #+END_SRC
