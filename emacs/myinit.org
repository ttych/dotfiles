#+STARTUP: content

* base
** ui

#+BEGIN_SRC emacs-lisp
  ;; Turn off mouse interface early in startup to avoid momentary display
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  ; (if (fboundp 'blink-cursor-mode) (blink-cursor-mode -1))

  (setq inhibit-startup-message t
		inhibit-startup-screen t
		inhibit-startup-echo-area-message ""
		inhibit-startup-buffer-menu t
		initial-scratch-message nil)
#+END_SRC

** user

#+BEGIN_SRC emacs-lisp
  (defvar users-settings-dir (expand-file-name "users/" user-emacs-directory)
	"This folder stores user specific setting.")
  (defvar user-settings-file
	(expand-file-name (concat user-login-name ".el")
					  users-settings-dir))
  (if (file-exists-p user-settings-file)
	  (load user-settings-file))
#+END_SRC

** bindings

   #+BEGIN_SRC emacs-lisp
	 ;; buffers
	 ;; (defalias 'list-buffers 'ibuffer)
	 (global-set-key (kbd "C-x B") 'ibuffer)
	 ;; (global-set-key (kbd "C-x B") 'ibuffer-other-window)
	 (global-set-key (kbd "<f5>") 'revert-buffer)

	 ;; Comment
	 (global-set-key (kbd "M-* #") 'comment-region)
	 (global-set-key (kbd "M-* @") 'uncomment-region)


	 ;; Search
	 (global-set-key (kbd "M-s O") 'multi-occur)
	 (global-set-key (kbd "M-s d") 'find-dired)
	 (global-set-key (kbd "M-s g") 'rgrep)
	 (global-set-key (kbd "M-s r") 'query-replace-regexp)


	 ;; Modes
	 (global-set-key (kbd "M-* m f") 'auto-fill-mode)
	 (global-set-key (kbd "M-* m w") 'whitespace-mode)
	 (global-set-key (kbd "M-* m s") 'auto-save-mode)
	 (global-set-key (kbd "M-* m l") 'display-line-numbers-mode)


	 ;; Align
	 (global-set-key (kbd "C-x \\") 'align-regexp)
	 (global-set-key (kbd "M-* \\") 'align-regexp)

	 ; C-c C-r    =>  recentf
   #+END_SRC

** shell
   #+BEGIN_SRC emacs-lisp
	 (add-hook
	  'term-mode-hook
	  (lambda()
		(setq-local show-trailing-whitespace nil)
		(hl-line-mode nil)
		(display-line-numbers-mode -1)
		(linum-mode -1)
		))

	 (add-hook
	  'eshell-mode-hook
	  (lambda()
		(setq-local show-trailing-whitespace nil)
		(hl-line-mode nil)
		(display-line-numbers-mode -1)
		(linum-mode -1)
		))
   #+END_SRC

** directories
   #+BEGIN_SRC emacs-lisp
	 ;; Write backup files to own directory
	 (setq backup-directory-alist
		   `(("." . ,savefile-dir)))
	 ;; Write all autosave files in the tmp dir
	 (setq auto-save-file-name-transforms
		   `((".*" ,savefile-dir t)))
	 ;; Make backups of files, even when they're in version control
	 (setq vc-make-backup-files t)
   #+END_SRC

** utils
   #+BEGIN_SRC emacs-lisp
	 (defconst *is-unix* (member system-type '(freebsd)))
	 (defconst *is-a-mac* (eq system-type 'darwin))
	 (defconst *is-linux* (member system-type '(gnu gnu/linux gnu/kfreebsd)))

	 ;; enable y/n answers
	 (fset 'yes-or-no-p 'y-or-n-p)
	 ;(defalias 'yes-or-no-p 'y-or-n-p)

	 (global-set-key (kbd "M-j")
					 (lambda ()
					   (interactive)
					   (join-line -1)))
   #+END_SRC
   
* daemon

  #+BEGIN_SRC emacs-lisp
	(defun client-save-kill-emacs()
	  " This is a function that can bu used to shutdown save buffers and
	shutdown the emacs daemon. It should be called using
	emacsclient -e '(client-save-kill-emacs)'.  This function will
	check to see if there are any modified buffers or active clients
	or frame.  If so an x window will be opened and the user will
	be prompted."

	  (let (new-frame modified-buffers active-clients-or-frames)

		;; Check if there are modified buffers or active clients or frames.
		(setq modified-buffers (modified-buffers-exist))
		(setq active-clients-or-frames ( or (> (length server-clients) 1)
											(> (length (frame-list)) 1)
											))

		;; When displaying the number of clients and frames:
		;; subtract 1 from the clients for this client.
		;; subtract 2 from the frames this frame (that we just created) and the default frame.
		(when ( or (not active-clients-or-frames)
				   (yes-or-no-p (format "There are currently %d clients and %d frames. Exit anyway?" (- (length server-clients) 1) (- (length (frame-list)) 2))))

		  ;; If the user quits during the save dialog then don't exit emacs.
		  ;; Still close the terminal though.
		  (let((inhibit-quit t))
			;; Save buffers
			(with-local-quit
			  (save-some-buffers))

			(if quit-flag
				(setq quit-flag nil)
			  ;; Kill all remaining clients
			  (progn
				(dolist (client server-clients)
				  (server-delete-client client))
				;; Exit emacs
				(kill-emacs)))
			))
		)
	  )

	(defun modified-buffers-exist()
	  "This function will check to see if there are any buffers
	that have been modified.  It will return true if there are
	and nil otherwise. Buffers that have buffer-offer-save set to
	nil are ignored."
	  (let (modified-found)
		(dolist (buffer (buffer-list))
		  (when (and (buffer-live-p buffer)
					 (buffer-modified-p buffer)
					 (not (buffer-base-buffer buffer))
					 (or
					  (buffer-file-name buffer)
					  (progn
						(set-buffer buffer)
						(and buffer-offer-save (> (buffer-size) 0))))
					 )
			(setq modified-found t)
			)
		  )
		modified-found
		)
	  )
  #+END_SRC

* packages
** base
*** configuration
	#+BEGIN_SRC emacs-lisp
	  (require 'package)
	  (setq package-enable-at-startup nil)
	  ;; [Enter ↵] (package-menu-describe-package) → Describe the package under cursor.
	  ;; [i] (package-menu-mark-install) → mark for installation.
	  ;; [u] (package-menu-mark-unmark) → unmark.
	  ;; [d] (package-menu-mark-delete) → mark for deletion (removal of a installed package).
	  ;; [x] (package-menu-execute) → for “execute” (start install/uninstall of marked items).
	  ;; [r] (package-menu-refresh) → refresh the list from server.
	  ;; (For complete list of keys, call describe-mode [Ctrl+h m])
	  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
						  (not (gnutls-available-p))))
			 (proto (if no-ssl "http" "https")))
		(when no-ssl (warn "\
	  Your version of Emacs does not support SSL connections,
	  which is unsafe because it allows man-in-the-middle attacks.
	  There are two things you can do about this warning:
	  1. Install an Emacs version that does support SSL and be safe.
	  2. Remove this warning from your init file so you won't see it again."))
		;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
		(add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
		(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
		(when (< emacs-major-version 24)
		  ;; For important compatibility libraries like cl-lib
		  (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))

	  (package-initialize)

	  (setq package-user-dir (expand-file-name "elpa" user-emacs-directory))

	  (unless package-archive-contents
		(package-refresh-contents))
	  (global-set-key (kbd "C-x P") 'list-packages)
	#+END_SRC

*** use-package
	#+BEGIN_SRC emacs-lisp
	  (unless (package-installed-p 'use-package)
	    (package-install 'use-package))

	  (require 'use-package)
	  (setq use-package-verbose t)
	#+END_SRC
** built-in
*** recentf
    #+BEGIN_SRC emacs-lisp
	  (use-package recentf
		:config
		(setq recentf-save-file (expand-file-name "recentf" savefile-dir)
			  recentf-max-saved-items 500
			  recentf-max-menu-items 15
			  ;; disable recentf-cleanup on Emacs start, because it can cause
			  ;; problems with remote files
			  recentf-auto-cleanup 'never)
		(global-set-key (kbd "M-* e r") 'recentf-open-files)
		(global-set-key (kbd "C-c C-r") 'recentf-open-files)
		(recentf-mode 1))
    #+END_SRC

*** savehist
	#+BEGIN_SRC emacs-lisp
	  (use-package savehist
		:config
		(setq savehist-additional-variables
			  ;; search entries
			  '(search-ring regexp-search-ring)
			  ;; save every minute
			  savehist-autosave-interval 60
			  ;; keep the home clean
			  savehist-file (expand-file-name "savehist" savefile-dir))
		(savehist-mode 1))
	#+END_SRC

*** bookmark
	#+BEGIN_SRC emacs-lisp
	  (use-package bookmark
		:config
		(setq bookmark-default-file (expand-file-name "bookmarks" savefile-dir)
			  bookmark-save-flag 1)
		)
	#+END_SRC

*** abbrev
	#+BEGIN_SRC emacs-lisp
	  (use-package abbrev
		:delight
		:config
		(setq save-abbrevs 'silent)
		(setq abbrev-file-name "~/.emacs.d/abbrev_defs")
		(setq-default abbrev-mode t)
		;; :delight
		;; (delight 'abbrev-mode " Abv" 'abbrev)
		)
	#+END_SRC

*** paren
	#+BEGIN_SRC emacs-lisp
	  (use-package paren
		:config
		(show-paren-mode 1)
		(setq show-paren-delay 0)
		)
	#+END_SRC

*** hl-line
	#+BEGIN_SRC emacs-lisp
	  (use-package hl-line
		:config
		(global-hl-line-mode 1)
		(set-face-background hl-line-face "gray13"))
	#+END_SRC

** utilities
*** try
   #+BEGIN_SRC emacs-lisp
	 (use-package try
	   :ensure t)
   #+END_SRC

*** delight
	#+BEGIN_SRC emacs-lisp
	  (use-package delight
		:ensure t)
	#+END_SRC

*** (disabled) diminish
	#+BEGIN_SRC emacs-lisp
	  ;; (use-package diminish
	  ;;   :ensure t)
	#+END_SRC

*** which-key
    #+BEGIN_SRC emacs-lisp
	  (use-package which-key
		:ensure t
		:config
		(which-key-mode 1)
		:delight
		)
    #+END_SRC

** termnial
*** multi-term
	#+BEGIN_SRC emacs-lisp
	  (use-package multi-term
		:ensure t
		:bind (
			   ("M-* t c" . multi-term)
			   ("M-* t t" . multi-term)
			   ("M-* t n" . multi-term-next)
			   ("M-* t p" . multi-term-prev)
			   ("M-* t o" . multi-term-dedicated-open)
			   ("M-* t d" . multi-term-dedicated-close)
			   ("M-* t T" . multi-term-dedicated-toggle)
			   ("M-* t s" . multi-term-dedicated-select)

			   )
		:config
		(setq multi-term-program (getenv "ESHELL"))
		)
	#+END_SRC
** ui
*** ace-window
	#+BEGIN_SRC emacs-lisp
	  (use-package ace-window
		:ensure t
		:bind ([remap other-window] . ace-window)
		:config
		(ace-window-display-mode t)
		)
	#+END_SRC

*** (disabled) beacon
	#+BEGIN_SRC
	  (use-package beacon
		:ensure t
		:config
		(beacon-mode 1)
		)
	#+END_SRC
** editing
*** comment-dwim-2
	#+BEGIN_SRC emacs-lisp
	  (use-package comment-dwim-2
		  :ensure t
		  :bind (
				 ("M-#" . comment-dwim-2)
				 )
		  )
	#+END_SRC
*** multiple-cursors
	#+BEGIN_SRC emacs-lisp
	  (use-package multiple-cursors
		:ensure t
		:bind (
			   ("M-_ e" . mc/edit-lines)
			   ("M-_ n" . mc/mark-next-like-this)
			   ("M-_ p" . mc/mark-previous-like-this)
			   ("M-_ w" . mc/mark-next-like-this-word)
			   ("M-_ W" . mc/mark-previous-like-this-word)
			   ("M-_ s" . mc/mark-next-like-this-word)
			   ("M-_ S" . mc/mark-previous-like-this-word)
			   ("M-_ a" . mc/mark-all-like-this)
			   )
		)
	#+END_SRC

*** expand-region
	#+BEGIN_SRC emacs-lisp
	  (use-package expand-region
		:ensure t
		:bind (
			   ("M-+" . er/expand-region)
			   ("M-* +" . er/expand-region)
			   )
		)
	#+END_SRC

*** ace-jump-mode
	#+BEGIN_SRC emacs-lisp
	  (use-package ace-jump-mode
		:ensure t
		:bind (
			   ("M-* j" . ace-jump-mode)
			   ("M-* J" . ace-jump-mode-pop-mark)
			   ("M-g j" . ace-jump-mode)
			   ("M-g J" . ace-jump-mode-pop-mark)
			   )
		)
	#+END_SRC

*** iy-go-to-char
	#+BEGIN_SRC emacs-lisp
	  (use-package iy-go-to-char
		:ensure t
		:bind (
			   ("M-g f" . iy-go-to-char)
			   ("M-g F" . iy-go-to-or-up-to-continue)
			   ("M-g b" . iy-go-to-char-backward)
			   ("M-g B" . iy-go-to-or-up-to-continue-backward)
			   ("C-c v f" . iy-go-to-char)
			   ("C-c v F" . iy-go-to-char-backward)
			   ("C-c v ." . iy-go-to-or-up-to-continue)
			   ("C-c v ," . iy-go-to-or-up-to-continue-backward)
			   ("C-c v t" . iy-go-up-to-char)
			   ("C-c v T" . iy-go-up-to-char-backward)
			   ("M-* v f" . iy-go-to-char)
			   ("M-* v F" . iy-go-to-char-backward)
			   ("M-* v ." . iy-go-to-or-up-to-continue)
			   ("M-* v ," . iy-go-to-or-up-to-continue-backward)
			   ("M-* v t" . iy-go-up-to-char)
			   ("M-* v T" . iy-go-up-to-char-backward)
			   )
		:config
		;; multiple-cursors
		(add-to-list 'mc/cursor-specific-vars 'iy-go-to-char-start-pos)
		)
	#+END_SRC

*** yasnippet
	#+BEGIN_SRC emacs-lisp
	  (use-package yasnippet
		:ensure t
		:delight yas-minor-mode
		:bind (
			   ("M-* y n" . yas-new-snippet)
			   ("M-* y i" . yas-insert-snippet)
			   ("M-* y v" . yas-visit-snippet-file)
			   )
		:config
		(yas-global-mode 1)
		)

	  (use-package yasnippet-snippets
		:ensure t
		)
	#+END_SRC

*** (disabled) ivy / counsel / swiper
   #+BEGIN_SRC
	 (use-package ivy
	   :ensure t
	   :bind (
	          ([remap switch-to-buffer] . ivy-switch-buffer)
			  )
	   :config
	   (ivy-mode 1)
	   (setq ivy-use-virtual-buffers t)
	   (setq enable-recursive-minibuffers t)
	   )

	 (use-package counsel
	   :ensure t
	   :bind (
  	          ([remap execute-extended-command] . counsel-M-x)
			  ([remap find-file] . counsel-find-file)
			  ;; ("C-c k" . counsel-ag)
			  )
	   )

	 (use-package swiper
	   :ensure t
	   :bind (
			  ("C-s" . swiper)
			  ("C-r" . swiper)
			  ("C-c C-r" . ivy-resume)
			  )
	   )
   #+END_SRC

*** (disabled) avy
	#+BEGIN_SRC
	  (use-package avy
		:ensure t
		:bind ("M-g c" . avy-goto-char)
		)
	#+END_SRC

*** (disabled) undo-tree
	#+BEGIN_SRC
	  (use-package undo-tree
		:ensure t
		:config
		(global-undo-tree-mode)
		)
	#+END_SRC
*** (disabled) hungry-mode
	#+BEGIN_SRC
	  (use-package hungry-mode
		:ensure t
		:config
		(global-hungry-delete-mode)
		)
	#+END_SRC
** auto-completion
*** (disabled) auto-complete
	#+BEGIN_SRC
	  (use-package auto-complete
		:ensure t
		:config
		(ac-config-default)
		(global-auto-complete-mode t)
		)
	#+END_SRC
** themes
*** gruvbox
	#+BEGIN_SRC emacs-lisp
	  (use-package gruvbox-theme
		:ensure t
		:config
		(load-theme 'gruvbox t))
	#+END_SRC
*** (disabled) zenburn
	#+BEGIN_SRC emacs-lisp
	  ;; (use-package zenburn-theme
	  ;;   :ensure t
	  ;;   :config
	  ;;   (load-theme 'zenburn t))
	#+END_SRC

*** (disabled) solarized
	#+BEGIN_SRC emacs-lisp
	  ;; (use-package solarized-theme
	  ;;   :ensure t
	  ;;   :config
	  ;;   (load-theme 'solarized-light t))
	#+END_SRC

*** (disabled) sanityinc-tomorrow
	#+BEGIN_SRC emacs-lisp
	  ;; (use-package color-theme-sanityinc-tomorrow
	  ;;   :ensure t
	  ;;   :config
	  ;;   (load-theme 'sanityinc-tomorrow-eighties t))
	#+END_SRC

*** (disabled) mandm
	#+BEGIN_SRC emacs-lisp
	  ;; (use-package mandm-theme
	  ;;   :ensure t
	  ;;   :config
	  ;;   (load-theme 'mandm t))
	#+END_SRC

** extra
*** emamucs
	#+BEGIN_SRC emacs-lisp
	  (use-package emamux
		:ensure t)
	#+END_SRC

*** htmlize
   #+BEGIN_SRC emacs-lisp
	 (use-package htmlize
	   :ensure t)
   #+END_SRC

*** git
    #+BEGIN_SRC emacs-lisp
	  (use-package magit
		:ensure t
		:bind (("M-* g g" . magit-status)))

	  (use-package git-timemachine
		:ensure t
		:bind (("M-* g t" . git-timemachine)))
    #+END_SRC
** syntax
*** flycheck
    #+BEGIN_SRC emacs-lisp
	  (use-package flycheck
			:ensure t
			:init (global-flycheck-mode))

	  ;; (use-package flycheck-inline
	  ;;       :ensure t
	  ;;       :config
	  ;;       ;; (global-flycheck-inline-mode 1)
	  ;;       :hook
	  ;;       (flycheck-mode . flycheck-inline-mode)
	  ;;       )
    #+END_SRC

*** company
	#+BEGIN_SRC emacs-lisp
	  (use-package company
		:ensure t
		:delight
		:defer t
		:init
		(global-company-mode)
		:config
		(setq company-idle-delay 1
			  ;; company-show-numbers t
			  ;; company-tooltip-align-annotations t
			  ;; company-tooltip-flip-when-above t
			  ;; company-minimum-prefix-length 2
			  ;; company-require-match nil
			  ;; company-tooltip-limit 10
			  )
		)
	#+END_SRC

** editing

** to filter
   #+BEGIN_SRC emacs-lisp
		  ;; more useful frame title, that show either a file or a
		  ;; buffer name (if the buffer isn't visiting a file)
		  (setq frame-title-format
				'((:eval (if (buffer-file-name)
								 (abbreviate-file-name (buffer-file-name))
						   "%b"))))


		  ;; hippie expand is dabbrev expand on steroids
		  (setq hippie-expand-try-functions-list '(try-expand-dabbrev
												   try-expand-dabbrev-all-buffers
												   try-expand-dabbrev-from-kill
												   try-complete-file-name-partially
												   try-complete-file-name
												   try-expand-all-abbrevs
												   try-expand-list
												   try-expand-line
												   try-complete-lisp-symbol-partially
												   try-complete-lisp-symbol))

		  ;; use hippie-expand instead of dabbrev
		  (global-set-key (kbd "M-/") #'hippie-expand)
		  (global-set-key (kbd "s-/") #'hippie-expand)

		  ;; align code in a pretty way
		  ;(global-set-key (kbd "C-x \\") #'align-regexp)

		  ;(define-key 'help-command (kbd "C-i") #'info-display-manual)

		  ;; misc useful keybindings
		  ;(global-set-key (kbd "s-<") #'beginning-of-buffer)
		  ;(global-set-key (kbd "s->") #'end-of-buffer)
		  ;(global-set-key (kbd "s-q") #'fill-paragraph)
		  ;(global-set-key (kbd "s-x") #'execute-extended-command)

		  ;; smart tab behavior - indent or complete
		  ;(setq tab-always-indent 'complete)


		  ;;; Packages :: additional


		  (use-package move-text
			:ensure t
			:bind  (([(control shift up)] . move-text-up)
					([(control shift down)] . move-text-down)))




		  (use-package rainbow-mode
			:ensure t
			:delight
			:config
			(add-hook 'prog-mode-hook 'rainbow-mode)
			)

		  (use-package webjump
			:ensure t
			:config
			(eval-after-load "webjump"
			  '(add-to-list 'webjump-sites
							'("Urban Dictionary" .
							  [simple-query
							   "www.urbandictionary.com"
							   "http://www.urbandictionary.com/define.php?term="
							   ""])))
			(global-set-key (kbd "C-c W") 'webjump)
			)

		  ;; Add Urban Dictionary to webjump

		  ;;; Packages :: theme

		  ;;; Packages :: to_validate






		  ;; emacs buffer name unique
		  (use-package uniquify
			:config
			(setq uniquify-buffer-name-style 'forward)
			(setq uniquify-separator "/")
			;; rename after killing uniquified
			(setq uniquify-after-kill-buffer-p t)
			;; don't muck with special buffers
			(setq uniquify-ignore-buffers-re "^\\*"))

		  ;; (use-package windmove
		  ;;   :config
		  ;;   ;; use shift + arrow keys to switch between visible buffers
		  ;; (windmove-default-keybindings))

		  (use-package dired
			:config
			;; dired - reuse current buffer by pressing 'a'
			(put 'dired-find-alternate-file 'disabled nil)

			;; always delete and copy recursively
			(setq dired-recursive-deletes 'always)
			(setq dired-recursive-copies 'always)

			;; if there is a dired buffer displayed in the next window, use its
			;; current subdir, instead of the current subdir of this dired buffer
			(setq dired-dwim-target t)

			;; enable some really cool extensions like C-x C-j(dired-jump)
			(require 'dired-x))

		  (use-package lisp-mode
			:config
			(defun user-visit-ielm ()
			  "Switch to default `ielm' buffer.
		  Start `ielm' if it's not already running."
			  (interactive)
			  (crux-start-or-switch-to 'ielm "*ielm*"))

			(add-hook 'emacs-lisp-mode-hook #'eldoc-mode)
			(add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
			(define-key emacs-lisp-mode-map (kbd "C-c C-z") #'user-visit-ielm)
			(define-key emacs-lisp-mode-map (kbd "C-c C-c") #'eval-defun)
			(define-key emacs-lisp-mode-map (kbd "C-c C-b") #'eval-buffer)
			(add-hook 'lisp-interaction-mode-hook #'eldoc-mode)
			(add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode))

		  (use-package ielm
			:config
			(add-hook 'ielm-mode-hook #'eldoc-mode)
			(add-hook 'ielm-mode-hook #'rainbow-delimiters-mode))

		  (use-package whitespace
			:init
			(dolist (hook '(prog-mode-hook text-mode-hook))
			  (add-hook hook #'whitespace-mode))
			;(add-hook 'before-save-hook #'whitespace-cleanup)
			:config
			(setq whitespace-line-column 80) ;; limit line length
			(setq whitespace-style '(face tabs empty trailing lines-tail)))
								  ;; lines indentation space-after-tab space-before-tab


		  ;; third-party packages

		  ;; (use-package exec-path-from-shell
		  ;;   :ensure t
		  ;;   :config
		  ;;   (when (memq window-system '(mac ns))
		  ;;     (exec-path-from-shell-initialize)))

		  (use-package rainbow-delimiters
			:ensure t)



		  ;; (use-package avy
		  ;;   :ensure t
		  ;;   :bind (("s-." . avy-goto-word-or-subword-1)
		  ;;          ("s-," . avy-goto-char))
		  ;;   :config
		  ;;   (setq avy-background t))


		  (use-package ag
			:ensure t)

		  ;; (use-package projectile
		  ;;   :ensure t
		  ;;   :init
		  ;;   (setq projectile-completion-system 'ivy)
		  ;;   :config
		  ;;   (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
		  ;;   (projectile-mode +1))

		  ;; (use-package pt
		  ;;   :ensure t)

		  (use-package elisp-slime-nav
			:ensure t
			:config
			(dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
			  (add-hook hook #'elisp-slime-nav-mode)))


		  (use-package anzu
			:ensure t
			:bind (("M-%" . anzu-query-replace)
				   ("C-M-%" . anzu-query-replace-regexp))
			:config
			(global-anzu-mode))

		  ;; (use-package easy-kill
		  ;;   :ensure t
		  ;;   :config
		  ;;   (global-set-key [remap kill-ring-save] 'easy-kill))




		  (use-package inf-ruby
			:ensure t
			:config
			(add-hook 'ruby-mode-hook #'inf-ruby-minor-mode))

		  (use-package ruby-mode
			:config
			(setq ruby-insert-encoding-magic-comment nil)
			(add-hook 'ruby-mode-hook #'subword-mode))

		  ;; (use-package clojure-mode
		  ;;   :ensure t
		  ;;   :config
		  ;;   (add-hook 'clojure-mode-hook #'paredit-mode)
		  ;;   (add-hook 'clojure-mode-hook #'subword-mode)
		  ;;   (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode))

		  ;; (use-package cider
		  ;;   :ensure t
		  ;;   :config
		  ;;   (setq nrepl-log-messages t)
		  ;;   (add-hook 'cider-mode-hook #'eldoc-mode)
		  ;;   (add-hook 'cider-repl-mode-hook #'eldoc-mode)
		  ;;   (add-hook 'cider-repl-mode-hook #'paredit-mode)
		  ;;   (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode))

		  ;; (use-package flycheck-joker
		  ;;   :ensure t)

		  ;; (use-package elixir-mode
		  ;;   :ensure t
		  ;;   :config
		  ;;   (add-hook 'elixir-mode #'subword-mode))

		  ;; (use-package erlang
		  ;;   :ensure t
		  ;;   :config
		  ;;   (when (eq system-type 'windows-nt)
		  ;;     (setq erlang-root-dir "C:/Program Files/erl7.2")
		  ;;     (add-to-list 'exec-path "C:/Program Files/erl7.2/bin")))

		  ;; (use-package haskell-mode
		  ;;   :ensure t
		  ;;   :config
		  ;;   (add-hook 'haskell-mode #'subword-mode))

		  ;; (use-package hl-todo
		  ;;   :ensure t
		  ;;   :config
		  ;;   (setq hl-todo-highlight-punctuation ":")
		  ;;   (global-hl-todo-mode)
		  ;;   :bind (("C-c T p" . hl-todo-previous)
		  ;; 		 ("C-c T n" . hl-todo-next)
		  ;; 		 ("C-c T o" . hl-todo-occur)))

		  ;; (use-package zop-to-char
		  ;;   :ensure t
		  ;;   :bind (("M-z" . zop-up-to-char)
		  ;;          ("M-Z" . zop-to-char)))

		  ;; (use-package imenu-anywhere
		  ;;   :ensure t
		  ;;   :bind (("C-c i" . imenu-anywhere)
		  ;;          ("s-i" . imenu-anywhere)))

		  (use-package flyspell
			:config
			(when (eq system-type 'windows-nt)
			  (add-to-list 'exec-path "C:/Program Files (x86)/Aspell/bin/"))
			(setq ispell-program-name "aspell" ; use aspell instead of ispell
				  ispell-extra-args '("--sug-mode=ultra"))
			(add-hook 'text-mode-hook #'flyspell-mode))
			;(add-hook 'prog-mode-hook #'flyspell-prog-mode))

		  ;; (use-package super-save
		  ;;   :ensure t
		  ;;   :config
		  ;;   ;; add integration with ace-window
		  ;;   (add-to-list 'super-save-triggers 'ace-window)
		  ;;   (super-save-mode +1))

		  ;; (use-package crux
		  ;;   :ensure t
		  ;;   :bind (("C-c o" . crux-open-with)
		  ;;          ("M-o" . crux-smart-open-line)
		  ;;          ("C-c n" . crux-cleanup-buffer-or-region)
		  ;;          ("C-c f" . crux-recentf-find-file)
		  ;;          ("C-M-z" . crux-indent-defun)
		  ;;          ("C-c u" . crux-view-url)
		  ;;          ("C-c e" . crux-eval-and-replace)
		  ;;          ("C-c w" . crux-swap-windows)
		  ;;          ("C-c D" . crux-delete-file-and-buffer)
		  ;;          ("C-c r" . crux-rename-buffer-and-file)
		  ;;          ("C-c t" . crux-visit-term-buffer)
		  ;;          ("C-c k" . crux-kill-other-buffers)
		  ;;          ("C-c TAB" . crux-indent-rigidly-and-copy-to-clipboard)
		  ;;          ("C-c I" . crux-find-user-init-file)
		  ;;          ("C-c S" . crux-find-shell-init-file)
		  ;;          ("s-r" . crux-recentf-find-file)
		  ;;          ("s-j" . crux-top-join-line)
		  ;;          ("C-^" . crux-top-join-line)
		  ;;          ("s-k" . crux-kill-whole-line)
		  ;;          ("C-<backspace>" . crux-kill-line-backwards)
		  ;;          ("s-o" . crux-smart-open-line-above)
		  ;;          ([remap move-beginning-of-line] . crux-move-beginning-of-line)
		  ;;          ([(shift return)] . crux-smart-open-line)
		  ;;          ([(control shift return)] . crux-smart-open-line-above)
		  ;;          ([remap kill-whole-line] . crux-kill-whole-line)
		  ;;          ("C-c s" . crux-ispell-word-then-abbrev)))

		  ;; (use-package diff-hl
		  ;;   :ensure t
		  ;;   :config
		  ;;   (global-diff-hl-mode +1)
		  ;;   (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
		  ;;   (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))

		  ;; (use-package undo-tree
		  ;;   :ensure t
		  ;;   :config
		  ;;   ;; autosave the undo-tree history
		  ;;   (setq undo-tree-history-directory-alist
		  ;;         `((".*" . ,temporary-file-directory)))
		  ;;   (setq undo-tree-auto-save-history t))


		  ;; ;; temporarily highlight changes from yanking, etc
		  (use-package volatile-highlights
			:ensure t
			:config
			(volatile-highlights-mode +1))

		  ;; (use-package ivy
		  ;;   :ensure t
		  ;;   :config
		  ;;   (ivy-mode 1)
		  ;;   (setq ivy-use-virtual-buffers t)
		  ;;   (setq enable-recursive-minibuffers t)
		  ;;   (global-set-key (kbd "C-c C-r") 'ivy-resume)
		  ;;   (global-set-key (kbd "<f6>") 'ivy-resume))

		  ;; (use-package swiper
		  ;;   :ensure t
		  ;;   :config
		  ;;   (global-set-key "\C-s" 'swiper))

		  ;; (use-package counsel
		  ;;   :ensure t
		  ;;   :config
		  ;;   (global-set-key (kbd "M-x") 'counsel-M-x)
		  ;;   (global-set-key (kbd "C-x C-f") 'counsel-find-file)
		  ;;   (global-set-key (kbd "<f1> f") 'counsel-describe-function)
		  ;;   (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
		  ;;   (global-set-key (kbd "<f1> l") 'counsel-find-library)
		  ;;   (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
		  ;;   (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
		  ;;   (global-set-key (kbd "C-c g") 'counsel-git)
		  ;;   (global-set-key (kbd "C-c j") 'counsel-git-grep)
		  ;;   (global-set-key (kbd "C-c a") 'counsel-ag)
		  ;;   (global-set-key (kbd "C-x l") 'counsel-locate)
		  ;;   (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))

		  ;;; my-init.el ends here



		  ;;; mode::emacs

		  ;; (use-package ido
		  ;;   :config
		  ;;   (setq ido-create-new-buffer 'always)
		  ;;   (setq ido-enable-flex-matching t)
		  ;;   (setq ido-everywhere t)
		  ;;   (ido-mode t)
		  ;;   )









		  ;; (use-package key-chord
		  ;;   :ensure t
		  ;;   :config
		  ;;   (key-chord-mode 1)
		  ;;   (key-chord-define-global "ss" 'isearch-forward)
		  ;;   )

		  ;; (use-package key-seq
		  ;;   :ensure t
		  ;;   )


		  (use-package grep-a-lot
			:ensure t
			:config
			(grep-a-lot-setup-keys)
			)




		  ;;; mode::language

		  (use-package paredit
			:ensure t
			:delight
			:config
			(add-hook 'emacs-lisp-mode-hogok #'paredit-mode)
			;; enable in the *scratch* buffer
			(add-hook 'lisp-interaction-mode-hook #'paredit-mode)
			(add-hook 'ielm-mode-hook #'paredit-mode)
			(add-hook 'lisp-mode-hook #'paredit-mode)
			(add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode)
			(add-hook 'scheme-mode-hook #'paredit-mode)
			)





		  ;;; org

		  (use-package ox-md)

		  (use-package org-bullets
			:ensure t
			:config
			(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
			)



		  ;;; mode::tools

		  (use-package restclient
			:ensure t
			:mode (("\\.http\\'" . restclient-mode))
			)

		  (use-package restclient-test
			:ensure t
			:config
			(add-hook 'restclient-mode-hook #'restclient-test-mode)
			)

		  ;;; 11_packages.el ends here

   #+END_SRC
* mode
** shell-mode
*** shl file
	#+BEGIN_SRC emacs-lisp
	  (add-to-list 'auto-mode-alist '("\\.shl\\'" . shell-script-mode))
	#+END_SRC
** org-mode
*** base
   #+BEGIN_SRC emacs-lisp
	 (global-set-key (kbd "C-c o l") 'org-store-link)
	 (global-set-key (kbd "C-c o a") 'org-agenda)
	 (global-set-key (kbd "C-c o c") 'org-capture)
	 (global-set-key (kbd "M-* o l") 'org-store-link)
	 (global-set-key (kbd "M-* o a") 'org-agenda)
	 (global-set-key (kbd "M-* o c") 'org-capture)

	 (setq org-todo-keywords
		   '((sequence "TODO(t)" "|" "DONE(d!)")
			 (sequence "BACKLOG(b!)" "READY(r!)" "WIP(w!)" "BLOCKED(B@)" "|" "DONE(d!)" "CANCELLED(c@)"))
		   )

	 ;; ; log - time tracking
	 ;; (setq org-log-done 'time)
	 ;; ;(setq org-log-done 'note)
	 ;; ; adding special markers ‘!’ (for a timestamp) and ‘@’ (for a note) in parentheses after each keyword
   #+END_SRC

*** reveal.js
   #+BEGIN_SRC emacs-lisp
	 (use-package ox-reveal
	   :ensure t
	   :config
	   (setq org-reveal-root "https://cdn.jsdelivr.net/reveal.js/3.0.0/")
	   (setq org-reveal-mathjax t)
	   )
   #+END_SRC

** text-mode
   #+BEGIN_SRC emacs-lisp
	 (add-hook 'text-mode-hook
			   (lambda ()
				 (visual-line-mode 1)
				 (auto-fill-mode t)
				 (setq
				  ;; use tabs
				  indent-tabs-mode t
				  ;; tabs size is 4 spaces
				  tab-width 4
				  ;; default insert is also 4 and inc of 4
				  ;; got to specify this or it will continue to expand to 8 spc
				  tab-stop-list (number-sequence 4 120 4)
				  )
				 ;; ask to turn on hard line wrapping
				 ;; (when (y-or-n-p "Auto Fill mode? ")
				 ;; (turn-on-auto-fill))
				 ))
   #+END_SRC

** prog-mode
   #+BEGIN_SRC emacs-lisp
	 (add-hook 'prog-mode-hook
			   (lambda()
			     ;; (subword-mode 1) ;; move by subword
				 (show-paren-mode 1)
				 (hl-line-mode 1)
				 (whitespace-mode)

				 ;; (comment-auto-fill)
				 ;; (electric-indent-mode 1) ; auto indent

				 (add-to-list 'write-file-functions 'delete-trailing-whitespace)
											 ;(add-to-list 'write-file-functions 'whitespace-cleanup)

				 (setq delete-trailing-lines t
					   indent-tabs-mode nil
					   tab-width 4
					   show-paren-delay 0
					   comment-multi-line t
					   whitespace-line-column 80
					   ;; whitespace-style '(face trailing tab-mark lines-tail)
					   ;; whitespace-display-mappings
					   ;; '(
					   ;; 	(tab-mark 9 [9655 9] [92 9]) ; tab  “▷”
					   ;; 	(newline-mark 10 [182 10]) ; LINE FEED “¶”
					   ;; 						;(space-mark 32 [183] [46]) ; SPACE 32 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」w
					   ;; 	)
					   )))
   #+END_SRC

** whitespace
   #+BEGIN_SRC emacs-lisp
	 ;; 2 - SPACES - INDENTED - MODES
	 (defvar 2-spaces-indented-modes
	   '(ruby-mode
		 html-mode
		 yaml-mode
		 ))
	 (dolist (mode 2-spaces-indented-modes)
	   (add-hook (intern (format "%s-hook" mode))
				 (lambda ()
				   (setq indent-tabs-mode nil
						 tab-width 2
						 )
				   )))

	 ;; 4 - SPACES - INDENTED - MODES
	 (defvar 4-spaces-indented-modes
	   '(python-mode
		 groovy-mode
		 ))
	 (dolist (mode 4-spaces-indented-modes)
	   (add-hook (intern (format "%s-hook" mode))
				 (lambda ()
				   (setq indent-tabs-mode nil
						 tab-width 4
						 )
				   )))

	 ;; TAB - INDENTED - MODES
	 ;; (defvar 4-spaces-indented-modes
	 ;;   '(
	 ;;     ))
	 ;; (dolist (mode space-indented-modes)
	 ;;   (add-hook (intern (format "%s-hook" mode))
	 ;;             (lambda ()
	 ;;               (setq indent-tabs-mode t
	 ;;                     tab-width 4
	 ;;                     )
	 ;;               )))
   #+END_SRC

** groovy
   #+BEGIN_SRC emacs-lisp
	 (use-package groovy-mode
	   :ensure t)
   #+END_SRC

** html

*** emmet-mode
   #+BEGIN_SRC emacs-lisp
	 (use-package emmet-mode
	   :ensure t
	   :config
	   (add-hook 'sgml-mode-hook #'emmet-mode)
	   (add-hook 'css-mode-hook  #'emmet-mode)
	   )
   #+END_SRC

** markdown
   #+BEGIN_SRC emacs-lisp
	 (use-package markdown-mode
	   :ensure t
	   :mode (("\\.m[k]d\\'" . markdown-mode)
			  ("\\.markdown\\'" . markdown-mode))
	   :config
	   (setq markdown-fontify-code-blocks-natively t))
   #+END_SRC

** adoc
   #+BEGIN_SRC emacs-lisp
	 (use-package adoc-mode
	   :ensure t
	   :mode "\\.adoc\\'")
   #+END_SRC

** yaml
   #+BEGIN_SRC emacs-lisp
	 (use-package yaml-mode
	   :ensure t)
   #+END_SRC

** cask
   #+BEGIN_SRC emacs-lisp
	 (use-package cask-mode
	   :ensure t)
   #+END_SRC

** ocaml

*** tuareg
   #+BEGIN_SRC emacs-lisp
	 (use-package tuareg
	   :ensure t
	   :mode ("\\.ml[ily]?$" . tuareg-mode))
   #+END_SRC

** lua
   #+BEGIN_SRC emacs-lisp
	 (use-package lua-mode
	   :ensure t)
   #+END_SRC

** puppet
   #+BEGIN_SRC emacs-lisp
	 (use-package puppet-mode
	   :ensure t)
   #+END_SRC

** language
*** (disabled) lsp
	#+BEGIN_SRC
	 (use-package lsp-mode
	   :ensure t
	   :hook
	   (python-mode . lsp)
	   (ruby-mode . lsp)
	   :commands lsp)

	 (use-package lsp-ui
	   :ensure t
	   :commands lsp-ui-mode)

     (use-package company-lsp :commands company-lsp)

	 ;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
	 ;; (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

	 ;; optionally if you want to use debugger
	 ;; (use-package dap-mode)
	 ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
	#+END_SRC

** python
*** jedi
	#+BEGIN_SRC emacs-lisp
	  (use-package jedi
		:ensure t
		:init
		(add-hook 'python-mode-hook 'jedi:setup)
		(add-hook 'python-mode-hook 'jedi:ac-setup)
		:config
		(setq jedi:complete-on-dot t
		      jedi:get-in-function-call-delay 500
			  jedi:install-imenu t
			  )
		)
	#+END_SRC

*** py-autopep8
	#+BEGIN_SRC emacs-lisp
	  (use-package py-autopep8
		:ensure t
		:config
		(add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
		)
	#+END_SRC

* utils
** editing
   #+BEGIN_SRC emacs-lisp
	 (defun open-line-below ()
	   (interactive)
	   (end-of-line)
	   (newline)
	   (indent-for-tab-command))

	 (defun open-line-above ()
	   (interactive)
	   (beginning-of-line)
	   (newline)
	   (forward-line -1)
	   (indent-for-tab-command))

	 ;; (global-set-key (kbd "<C-return>") 'open-line-below)
	 ;; (global-set-key (kbd "<C-S-return>") 'open-line-above)
   #+END_SRC
** debugging
   #+BEGIN_SRC emacs-lisp
	 ;;; Usage :
	 ;;; (derived-mode-parents 'dog)
	 (defun derived-mode-parents (mode)
	   (and mode
			(cons mode (derived-mode-parents
						(get mode 'derived-mode-parent)))))
	 ;; Example :
	 ; (derived-mode-parents 'html-mode)
	 ; (derived-mode-parents 'ruby-mode)
	 ; (derived-mode-parents 'python-mode)
	 ; (derived-mode-parents 'lisp-mode)
   #+END_SRC
