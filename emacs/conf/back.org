#+STARTUP: content

* base
* utils
** exec-path-from-shell (MacOS)
   #+BEGIN_SRC emacs-lisp
	 (use-package exec-path-from-shell
	   :ensure t
	   :config
	   (when (memq window-system '(mac ns))
		 (exec-path-from-shell-initialize))
	   )
   #+END_SRC
** iy-go-to-char (FIXME)
   #+BEGIN_SRC
	 (use-package iy-go-to-char
	   :ensure t
       :pin manual
	   :bind (
			  ("M-s f" . iy-go-to-char)
			  ("M-s F" . iy-go-to-or-up-to-continue)
			  ("M-s b" . iy-go-to-char-backward)
			  ("M-s B" . iy-go-to-or-up-to-continue-backward)
			  ("M-s t" . iy-go-up-to-char)
			  ("M-s T" . iy-go-up-to-char-backward)
			  )
	   :config
	   ;; multiple-cursors
	   (add-to-list 'mc/cursor-specific-vars 'iy-go-to-char-start-pos)
	   )
   #+END_SRC
** move-text
   #+BEGIN_SRC emacs-lisp
	 (use-package move-text
	   :ensure t
	   :bind  (
			   ("<S-up>" . move-text-up)
			   ("<S-down>" . move-text-down)
			   ("M-[ 1 ; 2 a". move-text-up)
			   ("M-[ 1 ; 2 b" . move-text-down)
			   )
	   )
   #+END_SRC
** key-seq
   #+BEGIN_SRC emacs-lisp
	 (use-package key-seq
	   :ensure t
	   )
   #+END_SRC
** key-chord
   #+BEGIN_SRC emacs-lisp
	 (use-package key-chord
	   :ensure t
	   :config
	   (key-chord-mode 1)
	   (key-chord-define-global "ss" 'isearch-forward)
	   )
   #+END_SRC
** crux
   #+BEGIN_SRC emacs-lisp
   		  ;; (use-package crux
		  ;;   :ensure t
		  ;;   :bind (("C-c o" . crux-open-with)
		  ;;          ("M-o" . crux-smart-open-line)
		  ;;          ("C-c n" . crux-cleanup-buffer-or-region)
		  ;;          ("C-c f" . crux-recentf-find-file)
		  ;;          ("C-M-z" . crux-indent-defun)
		  ;;          ("C-c u" . crux-view-url)
		  ;;          ("C-c e" . crux-eval-and-replace)
		  ;;          ("C-c w" . crux-swap-windows)
		  ;;          ("C-c D" . crux-delete-file-and-buffer)
		  ;;          ("C-c r" . crux-rename-buffer-and-file)
		  ;;          ("C-c t" . crux-visit-term-buffer)
		  ;;          ("C-c k" . crux-kill-other-buffers)
		  ;;          ("C-c TAB" . crux-indent-rigidly-and-copy-to-clipboard)
		  ;;          ("C-c I" . crux-find-user-init-file)
		  ;;          ("C-c S" . crux-find-shell-init-file)
		  ;;          ("s-r" . crux-recentf-find-file)
		  ;;          ("s-j" . crux-top-join-line)
		  ;;          ("C-^" . crux-top-join-line)
		  ;;          ("s-k" . crux-kill-whole-line)
		  ;;          ("C-<backspace>" . crux-kill-line-backwards)
		  ;;          ("s-o" . crux-smart-open-line-above)
		  ;;          ([remap move-beginning-of-line] . crux-move-beginning-of-line)
		  ;;          ([(shift return)] . crux-smart-open-line)
		  ;;          ([(control shift return)] . crux-smart-open-line-above)
		  ;;          ([remap kill-whole-line] . crux-kill-whole-line)
		  ;;          ("C-c s" . crux-ispell-word-then-abbrev)))
   #+END_SRC
** auto-complete
   #+BEGIN_SRC
	 (use-package auto-complete
	   :ensure t
	   :config
	   (ac-config-default)
	   (global-auto-complete-mode t)
	   )
   #+END_SRC
** beacon
   #+BEGIN_SRC
     (use-package beacon
       :ensure t
       :config
       (beacon-mode 1)
       )
   #+END_SRC
** diminish
   #+BEGIN_SRC
     (use-package diminish
       :ensure t)
   #+END_SRC
** emamux (tmux)
   #+BEGIN_SRC
     (use-package emamux
       :ensure t
       :config
       (global-set-key (kbd "M-n") emamux:keymap)
       )
   #+END_SRC
** lsp
   #+BEGIN_SRC
	 (use-package lsp-mode
	   :ensure t
	   :hook
	   (python-mode . lsp)
	   (ruby-mode . lsp)
	   :commands lsp)

	 (use-package lsp-ui
	   :ensure t
	   :commands lsp-ui-mode)

	 (use-package company-lsp :commands company-lsp)

	 ;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
	 ;; (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

	 ;; optionally if you want to use debugger
	 ;; (use-package dap-mode)
	 ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
   #+END_SRC
** turnip (tmux) (FIXME)
   #+BEGIN_SRC
     (use-package turnip
       :ensure t)
   #+END_SRC
** multi-term
   #+BEGIN_SRC
	 (use-package multi-term
	   :ensure t
	   :bind (
			  ("M-* t c" . multi-term)
			  ("M-* t t" . multi-term)
			  ("M-* t n" . multi-term-next)
			  ("M-* t p" . multi-term-prev)
			  ("M-* t o" . multi-term-dedicated-open)
			  ("M-* t d" . multi-term-dedicated-close)
			  ("M-* t T" . multi-term-dedicated-toggle)
			  ("M-* t s" . multi-term-dedicated-select)

			  )
	   :config
	   (setq multi-term-program (getenv "ESHELL"))
	   )
   #+END_SRC
** ivy / counsel / swiper
   #+BEGIN_SRC
	 (use-package ivy
	   :ensure t
	   :bind (
	          ([remap switch-to-buffer] . ivy-switch-buffer)
			  )
	   :config
	   (ivy-mode 1)
	   (setq ivy-use-virtual-buffers t)
	   (setq enable-recursive-minibuffers t)
	   )

	 (use-package counsel
	   :ensure t
	   :bind (
  	          ([remap execute-extended-command] . counsel-M-x)
			  ([remap find-file] . counsel-find-file)
			  ;; ("C-c k" . counsel-ag)
		  ;;   (global-set-key (kbd "M-x") 'counsel-M-x)
		  ;;   (global-set-key (kbd "C-x C-f") 'counsel-find-file)
		  ;;   (global-set-key (kbd "<f1> f") 'counsel-describe-function)
		  ;;   (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
		  ;;   (global-set-key (kbd "<f1> l") 'counsel-find-library)
		  ;;   (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
		  ;;   (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
		  ;;   (global-set-key (kbd "C-c g") 'counsel-git)
		  ;;   (global-set-key (kbd "C-c j") 'counsel-git-grep)
		  ;;   (global-set-key (kbd "C-c a") 'counsel-ag)
		  ;;   (global-set-key (kbd "C-x l") 'counsel-locate)
		  ;;   (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
			  )
	   )

	 (use-package swiper
	   :ensure t
	   :bind (
			  ("C-s" . swiper)
			  ("C-r" . swiper)
			  ("C-c C-r" . ivy-resume)
			  )
	   )
   #+END_SRC
** avy
   #+BEGIN_SRC
	  (use-package avy
		:ensure t
		:bind (("M-g c" . avy-goto-char)
               ("M-g w" . avy-goto-word-or-subword-1))
	    :config
        (setq avy-background t)
		)
   #+END_SRC
** undo-tree
   #+BEGIN_SRC
	  (use-package undo-tree
		:ensure t
		:config
		(global-undo-tree-mode)
		)
   #+END_SRC
** hungry-mode
   #+BEGIN_SRC
	  (use-package hungry-mode
		:ensure t
		:config
		(global-hungry-delete-mode)
		)
   #+END_SRC
** flycheck
   #+BEGIN_SRC
	 (use-package flycheck
	   :ensure t
	   :init (global-flycheck-mode))

	 ;; (use-package flycheck-inline
	 ;;       :ensure t
	 ;;       :config
	 ;;       ;; (global-flycheck-inline-mode 1)
	 ;;       :hook
	 ;;       (flycheck-mode . flycheck-inline-mode)
	 ;;       )

     ;; (use-package flycheck-joker
     ;;   :ensure t)
   #+END_SRC
** company
   #+BEGIN_SRC
	 (use-package company
	   :ensure t
	   :delight
	   :defer t
	   :init
	   (global-company-mode)
	   :config
	   (setq company-idle-delay 1
			 ;; company-show-numbers t
			 ;; company-tooltip-align-annotations t
			 ;; company-tooltip-flip-when-above t
			 ;; company-minimum-prefix-length 2
			 ;; company-require-match nil
			 ;; company-tooltip-limit 10
			 )
	   )
   #+END_SRC
** jedi
   #+BEGIN_SRC
	 (use-package jedi
	   :ensure t
	   :init
	   (add-hook 'python-mode-hook 'jedi:setup)
	   (add-hook 'python-mode-hook 'jedi:ac-setup)
	   :config
	   (setq jedi:complete-on-dot t
			 jedi:get-in-function-call-delay 500
			 jedi:install-imenu t
			 )
	   )
   #+END_SRC
** webjump
   #+BEGIN_SRC
	 (use-package webjump
	   :ensure t
	   :config
	   (eval-after-load "webjump"
		 '(add-to-list 'webjump-sites
					   '("Urban Dictionary" .
						 [simple-query
						  "www.urbandictionary.com"
						  "http://www.urbandictionary.com/define.php?term="
						  ""])))
	   (global-set-key (kbd "C-c W") 'webjump)
	   )
   #+END_SRC
** restclient
   #+BEGIN_SRC
	 (use-package restclient
	   :ensure t
	   :mode (("\\.http\\'" . restclient-mode))
	   )

	 (use-package restclient-test
	   :ensure t
	   :config
	   (add-hook 'restclient-mode-hook #'restclient-test-mode)
	   )
   #+END_SRC
** key-seq
   #+BEGIN_SRC
	 (use-package key-seq
	   :ensure t
	   )
   #+END_SRC
** key-chord
   #+BEGIN_SRC
	 (use-package key-chord
	   :ensure t
	   :config
	   (key-chord-mode 1)
	   (key-chord-define-global "ss" 'isearch-forward)
	   )
   #+END_SRC
** erlang
   #+BEGIN_SRC
	 (use-package erlang
	   :ensure t
	   :config
	   (when (eq system-type 'windows-nt)
		 (setq erlang-root-dir "C:/Program Files/erl7.2")
		 (add-to-list 'exec-path "C:/Program Files/erl7.2/bin")))
   #+END_SRC
** cider
   #+BEGIN_SRC
   		  ;; (use-package cider
		  ;;   :ensure t
		  ;;   :config
		  ;;   (setq nrepl-log-messages t)
		  ;;   (add-hook 'cider-mode-hook #'eldoc-mode)
		  ;;   (add-hook 'cider-repl-mode-hook #'eldoc-mode)
		  ;;   (add-hook 'cider-repl-mode-hook #'paredit-mode)
		  ;;   (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC
** grep-o-matic
   #+BEGIN_SRC
	 (use-package grep-o-matic
	   :ensure t
	   :config
	   )
   #+END_SRC
** rainbow-delimiter
   summary: parentheses-like mode which highlights delimiters such as
            parentheses, brackets or braces
   repo: https://github.com/Fanael/rainbow-delimiters
   #+BEGIN_SRC
	 (use-package rainbow-delimiters
	   :ensure t
	   :config
	   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
	   )
   #+END_SRC
** pt
   #+BEGIN_SRC
	 (use-package pt
	   :ensure t)
   #+END_SRC
** undo-tree
   #+BEGIN_SRC
	 (use-package undo-tree
	   :ensure t
	   :config
	   ;; autosave the undo-tree history
	   (setq undo-tree-history-directory-alist
			 `((".*" . ,temporary-file-directory)))
	   (setq undo-tree-auto-save-history t))
   #+END_SRC
** volatile-highlights
   #+BEGIN_SRC
	 (use-package volatile-highlights
	   :ensure t
	   :config
	   (volatile-highlights-mode +1))
   #+END_SRC
** diff-hl
   #+BEGIN_SRC
		  ;; (use-package diff-hl
		  ;;   :ensure t
		  ;;   :config
		  ;;   (global-diff-hl-mode +1)
		  ;;   (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
		  ;;   (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
   #+END_SRC
** super-save
   #+BEGIN_SRC
		  ;; (use-package super-save
		  ;;   :ensure t
		  ;;   :config
		  ;;   ;; add integration with ace-window
		  ;;   (add-to-list 'super-save-triggers 'ace-window)
		  ;;   (super-save-mode +1))
   #+END_SRC
** zop-to-char
   #+BEGIN_SRC
		  ;; (use-package zop-to-char
		  ;;   :ensure t
		  ;;   :bind (("M-z" . zop-up-to-char)
		  ;;          ("M-Z" . zop-to-char)))
   #+END_SRC
** easy-kill
   #+BEGIN_SRC
		  ;; (use-package easy-kill
		  ;;   :ensure t
		  ;;   :config
		  ;;   (global-set-key [remap kill-ring-save] 'easy-kill))
   #+END_SRC
** projectile
   #+BEGIN_SRC
   		  ;; (use-package projectile
		  ;;   :ensure t
		  ;;   :init
		  ;;   (setq projectile-completion-system 'ivy)
		  ;;   :config
		  ;;   (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
		  ;;   (projectile-mode +1))
   #+END_SRC
** ido
   #+BEGIN_SRC
		  ;; (use-package ido
		  ;;   :config
		  ;;   (setq ido-create-new-buffer 'always)
		  ;;   (setq ido-enable-flex-matching t)
		  ;;   (setq ido-everywhere t)
		  ;;   (ido-mode t)
		  ;;   )
   #+END_SRC
** imenu-anywhere
   #+BEGIN_SRC
		  ;; (use-package imenu-anywhere
		  ;;   :ensure t
		  ;;   :bind (("C-c i" . imenu-anywhere)
		  ;;          ("s-i" . imenu-anywhere)))
   #+END_SRC

* modes
** ruby-mode
   #+BEGIN_SRC emacs-lisp
	 (use-package ruby-mode
	   :config
	   (setq ruby-insert-encoding-magic-comment nil)
	   (add-hook 'ruby-mode-hook #'subword-mode)

	   (add-hook 'enh-ruby-mode-hook 'inf-ruby-minor-mode)
	   (add-hook 'compilation-filter-hook 'inf-ruby-auto-enter)
	   (add-hook 'enh-ruby-mode-hook 'seeing-is-believing)
       )

	 (use-package inf-ruby
	   :ensure t
	   :config
	   (add-hook 'ruby-mode-hook #'inf-ruby-minor-mode))
	 (use-package seeing-is-believing
	   :ensure t
	   :delight (seeing-is-believing " oO")
	   :config
	   (setq seeing-is-believing-timeout 10))
   #+END_SRC
* themes
** zenburn (+)
   #+BEGIN_SRC emacs-lisp
	 (use-package zenburn-theme
	   :ensure t
	   :config
	   (load-theme 'zenburn t)
	   )
   #+END_SRC
** solarized (-)
   #+BEGIN_SRC emacs-lisp
	 (use-package solarized-theme
	   :ensure t
	   :config
	   (load-theme 'solarized-light t)
	   )
   #+END_SRC
** heroku (-)
   #+BEGIN_SRC emacs-lisp
	 (use-package heroku-theme
	   :ensure t
	   :init
	   (load-theme 'heroku t)
	   )
   #+END_SRC
** distinguished (-)
   #+BEGIN_SRC emacs-lisp
	 (use-package distinguished-theme
	   :ensure t
	   :init
	   (load-theme 'distinguished t)
	   )
   #+END_SRC
** base16 (--)
   #+BEGIN_SRC emacs-lisp
	 (use-package base16-theme
	   :ensure t
	   :config
	   (load-theme 'base16-eighties t)
	   )
   #+END_SRC
** atom-one-dark (--)
   #+BEGIN_SRC emacs-lisp
	 (use-package atom-one-dark-theme
	   :ensure t
	   :config
	   (load-theme 'atom-one-dark t)
	   )
   #+END_SRC
** mandm (g) (-)
   #+BEGIN_SRC emacs-lisp
	 (use-package mandm-theme
	   :ensure t
	   :config
	   (load-theme 'mandm t)
	   )
   #+END_SRC
** monokai (-)
   #+BEGIN_SRC emacs-lisp
	 (use-package monokai-theme
	   :ensure t
	   :config
	   (load-theme 'monokai t)
	   )
   #+END_SRC
** sublime
   #+BEGIN_SRC emacs-lisp
	 (use-package sublime-themes
	   :ensure t
	   :config
	   (load-theme 'brin t)
	   )
   #+END_SRC
** sanityinc-tomorrow (pink) (-)
   #+BEGIN_SRC emacs-lisp
	 (use-package color-theme-sanityinc-tomorrow
	   :ensure t
	   :config
	   (load-theme 'sanityinc-tomorrow-eighties t)
	   )
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
	 (use-package color-theme-sanityinc-tomorrow
	   :ensure t
	   :config
	   (load-theme 'sanityinc-tomorrow-eighties t)
	   )
   #+END_SRC
** material (g) (-)
   #+BEGIN_SRC emacs-lisp
	 (use-package material-theme
	   :ensure t
	   :config
	   (load-theme 'material t)
	   )
   #+END_SRC
** flatland (~)
   #+BEGIN_SRC emacs-lisp
	 (use-package flatland-theme
	   :ensure t
	   :init
	   (load-theme 'flatland t)
	   )
   #+END_SRC
** flatland-black (++)
   #+BEGIN_SRC emacs-lisp
	 (use-package flatland-black-theme
	   :ensure t
	   :init
	   (load-theme 'flatland-black t)
	   )
   #+END_SRC
** railscast (+)
   #+BEGIN_SRC emacs-lisp
	 (use-package railscasts-theme
	   :ensure t
	   :init
	   (load-theme 'railscasts t)
	   )
   #+END_SRC
** gruvbox (+)
   #+BEGIN_SRC emacs-lisp
	 (use-package gruvbox-theme
	   :ensure t
	   :config
	   (load-theme 'gruvbox t)
	   )
   #+END_SRC
** railscast-reloaded (++)
   #+BEGIN_SRC emacs-lisp
	 (use-package railscasts-reloaded-theme
	   :ensure t
	   :init
	   (load-theme 'railscasts-reloaded t)
	   )
   #+END_SRC
** afternoon (++)
   #+BEGIN_SRC emacs-lisp
	 (use-package afternoon-theme
	   :ensure t
	   :init
	   (load-theme 'afternoon t)
	   )
   #+END_SRC
